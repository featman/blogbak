{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"source/imge/1.png","path":"imge/1.png","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"1473ee1a881fa8392725c7ac06362335aa78c14b","modified":1439030925000},{"_id":"source/_posts/Liangxindns.md","shasum":"e5ee352ec8b9f202613b686691e123277b86f674","modified":1439103201000},{"_id":"source/_posts/busybox.md","shasum":"d5c1b3bed05337484c64c4ed2614f9f2df163741","modified":1439101738000},{"_id":"source/_posts/hadoop.md","shasum":"d2b04d758ef30dfadf5dd6b509ca3c7811cadd53","modified":1439100965000},{"_id":"source/_posts/sshreverse.md","shasum":"e1a526ac062ac82bf60e56dc91b4d2cd72a72d39","modified":1439120109000},{"_id":"source/_posts/phpmyadmin.md","shasum":"792910425d357ef2334f52dd55b99d1f7075fb3c","modified":1439099503000},{"_id":"source/_posts/linuxneicunguanli.md","shasum":"8a50f07743441dce949464614bb92d62edecc6de","modified":1439100264000},{"_id":"source/_posts/openwrt.md","shasum":"fd685a5ae56aa8f2e63553b16dd78ab5034a92e1","modified":1439105317000},{"_id":"source/_posts/新建文本文档.txt","shasum":"e287eb0e0fc8966454c4b7b5e99784bb55ac9f5f","modified":1439082816000},{"_id":"source/imge/1.png","shasum":"60e066bac07555c56dd4963abd81f59c2daa5785","modified":1439036988000},{"_id":"source/search/index.md","shasum":"33ba535f337a8bbb12473103dcb0aa5505b36fac","modified":1438998791000},{"_id":"source/tags/index.md","shasum":"a50cb55ee576e17268c9216edf600ecdd757626a","modified":1438956486000},{"_id":"themes/yilia/_config.yml","shasum":"90139bdcead273fdcc4508838dd01090a09cb3b1","modified":1439119992000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"ef8dd558f908f293c34123c0b7ff879d2fd0c09f","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"963c106412a3ab142871976978ecc9884aeca17a","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"70a9951e4e2d30aabba88e75c3fa54b9235ce6a6","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"cd0af87ee781ac9c2b0e6a2a05b063d4bd497d9c","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1439087771000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1439087771000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1439087771000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1439087771000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1439087771000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1439087771000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1439087771000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1439087771000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1439087771000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1439087771000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"8cadf8437ce6f372802d3d28617a1ab97e7c818e","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"4268f759920106a576c6037264076b36018ff73b","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1439087771000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1439087771000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1439087771000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1439087771000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1439087771000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1439087771000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1439087771000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1439087771000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1439087771000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1439087771000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1439087771000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1439087771000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1439087771000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1439087771000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1439087771000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1439087771000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1439087771000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1439087771000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1439087771000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1439087771000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1439087771000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1439087771000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1439087771000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1439087771000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1439087771000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1439087771000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1439087771000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1439087771000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1439087771000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1439087771000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1439087771000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1439087771000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1439087771000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1439087771000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1439087771000},{"_id":"public/js/pc.js","modified":1439120143724,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1439120143734,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1439120143739,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1439120143742,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1439120143749,"shasum":"f19adbcc0dac33536bc6660598059048ec901882"},{"_id":"public/img/zhihu.png","modified":1439120143766,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1439120143778,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1439120143785,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1439120143787,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/scrollbar_arrow.png","modified":1439120143798,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1439120143806,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1439120143811,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1439120143824,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1439120143832,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1439120143857,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1439120143873,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1439120143879,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1439120143888,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1439120143926,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1439120143935,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1439120143938,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1439120143946,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1439120143956,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1439120143964,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1439120143969,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1439120143976,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1439120143978,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1439120143985,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1439120143988,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1439120144000,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1439120144003,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1439120144010,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1439120144016,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1439120144024,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1439120144029,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1439120144037,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1439120144044,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1439120144048,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1439120145864,"shasum":"e56554c624d9d49e9429eeeb9222488f8df634ec"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1439120146634,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1439120146641,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1439120146647,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1439120146656,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1439120146664,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/imge/1.png","modified":1439120146669,"shasum":"60e066bac07555c56dd4963abd81f59c2daa5785"},{"_id":"public/404.html","modified":1439120146674,"shasum":"5c6699154a8233bf776bcb4fbd3ba078beddccc7"},{"_id":"public/tags/index.html","modified":1439120146809,"shasum":"c98e19e8328602c56287cbc845aa46f88809f6c6"},{"_id":"public/search/index.html","modified":1439120146828,"shasum":"96d36286a96498706701fa3ead313bf0b53611e1"},{"_id":"public/2015/08/01/linuxneicunguanli/index.html","modified":1439120146871,"shasum":"31448063019072e2ac7d0a12d1735eee28ff49c1"},{"_id":"public/2015/07/25/phpmyadmin/index.html","modified":1439120146906,"shasum":"c2352f1df357ce3b83f3b0d0b4a9c3f9f78ee4e8"},{"_id":"public/2015/07/15/Liangxindns/index.html","modified":1439120146932,"shasum":"f8105eedb554f5b2fa5c2d0c6bb742f8faeceefe"},{"_id":"public/2015/04/11/busybox/index.html","modified":1439120146983,"shasum":"8a28959d3a21fdd18f33793228336e399f13a5f0"},{"_id":"public/2015/01/11/hadoop/index.html","modified":1439120147060,"shasum":"dbc240a13150e8f567186d9895a50622b352e06a"},{"_id":"public/2014/10/16/sshreverse/index.html","modified":1439120147085,"shasum":"b8ab6ad31aedafa51be48c182676066c16604c18"},{"_id":"public/2014/10/16/openwrt/index.html","modified":1439120147143,"shasum":"7576ae697d010bb61de91cb09a8158050b3d6724"},{"_id":"public/archives/index.html","modified":1439120147206,"shasum":"7256f5ecd3a5458edb4708980dae3da4f7507162"},{"_id":"public/archives/2014/index.html","modified":1439120147229,"shasum":"4937233c6ec24a4229590a4269765d9d24ff0412"},{"_id":"public/archives/2014/10/index.html","modified":1439120147265,"shasum":"f84eedc62d9b99163cca0e7291c5e640c39d3ea0"},{"_id":"public/archives/2015/index.html","modified":1439120147327,"shasum":"5600cf72c1c1f82d9c5b7cfb27e4aac75ac63c5e"},{"_id":"public/archives/2015/01/index.html","modified":1439120147365,"shasum":"84fdd2e1427a927eef6a170cea12f9dfe919a120"},{"_id":"public/archives/2015/04/index.html","modified":1439120147385,"shasum":"d86b36d124194438986376f1b4f78ff3f0955982"},{"_id":"public/archives/2015/07/index.html","modified":1439120147420,"shasum":"1bc6064b31bfb8ba76e5e09594193dadfbf6d02b"},{"_id":"public/archives/2015/08/index.html","modified":1439120147443,"shasum":"a53117c1519a9c4a42f39d3f4d94ca32e46ff413"},{"_id":"public/sitemap.xml","modified":1439120147445,"shasum":"48de20df0ac9d96a0c9f0f2ce3e329951341da87"},{"_id":"public/categories/网络技术/index.html","modified":1439120147481,"shasum":"175244511b2a05b547d895927c0a26e5cb919cde"},{"_id":"public/categories/数据库技术/index.html","modified":1439120147501,"shasum":"3732eab9efabfe227c9d5c17cf1dd6583ddd5080"},{"_id":"public/categories/嵌入式linux/index.html","modified":1439120147536,"shasum":"3118095a334ea49fd604e265a260ed04f93e170d"},{"_id":"public/categories/转载文章/index.html","modified":1439120147560,"shasum":"9a4a8ba409cc41305a21f1b17d412c85ad777f02"},{"_id":"public/categories/hadoop/index.html","modified":1439120147580,"shasum":"0bcb08df844c3884c62925bbcec59350311ac48c"},{"_id":"public/index.html","modified":1439120147700,"shasum":"607089654332b05cf81f09aeaed41f3c1dac9898"},{"_id":"public/tags/ssh反向代理/index.html","modified":1439120147724,"shasum":"24b5b6b0cf9ebfa6d7107ab26c95e90140a94ce2"},{"_id":"public/tags/ssh/index.html","modified":1439120147752,"shasum":"a7088093e943e51f44b3cae6a32d716567a27d62"},{"_id":"public/tags/穿越内网/index.html","modified":1439120147777,"shasum":"d7ef7d61f2bef4399197a9efe10ae2777aa45eca"},{"_id":"public/tags/excel/index.html","modified":1439120147797,"shasum":"74c075c0691042e26de2d55db8c2e39e4765c818"},{"_id":"public/tags/phpmyadmin/index.html","modified":1439120147818,"shasum":"99c56612916462ca9314804f42a860f776423168"},{"_id":"public/tags/uboot定制/index.html","modified":1439120147841,"shasum":"43b62510aa063eac88e9d61ccb5d9f98cf9660aa"},{"_id":"public/tags/内核编译/index.html","modified":1439120147862,"shasum":"e8c7da60e16908195016708fc206e58e7849429e"},{"_id":"public/tags/打印机共享/index.html","modified":1439120147881,"shasum":"1a9976c106c356843dd0382cba3ea220dfc1af5e"},{"_id":"public/tags/openwrt/index.html","modified":1439120147912,"shasum":"63703d41bedfe5d123341d0d471b4679a0cbbbb6"},{"_id":"public/tags/linux/index.html","modified":1439120147934,"shasum":"91f30bdb9fc3ff28b234bcb96f40f73f3ef39157"},{"_id":"public/tags/内存管理/index.html","modified":1439120147958,"shasum":"088f53738a0b6d3fb8b0fd187f54ee8a38fb486c"},{"_id":"public/tags/分页技术/index.html","modified":1439120147985,"shasum":"f3476f279902651fdffe5246fbedb414e4513bdb"},{"_id":"public/tags/hadoop/index.html","modified":1439120148009,"shasum":"635e2305678b44d2ae3a8a955fca91dfe6f19aaa"},{"_id":"public/tags/n2n/index.html","modified":1439120148029,"shasum":"1ae33a3d6eeceaa4a7d514802177a8df2326fd72"},{"_id":"public/tags/vpn/index.html","modified":1439120148050,"shasum":"f0033b33099924eca313e218d9ae814e35c9d7dc"},{"_id":"public/tags/文件系统/index.html","modified":1439120148084,"shasum":"4f25a0a8748ca955edd34f85d236d2cb4421c596"},{"_id":"public/tags/busybox/index.html","modified":1439120148104,"shasum":"dad1ddebfbc8f6588f86696e5266cc83d29ac6f3"},{"_id":"public/tags/移植/index.html","modified":1439120148117,"shasum":"4e5ebd42e8ae7de4631f8bb3a65e98187fae8b17"},{"_id":"public/tags/DNS，第三方DNS/index.html","modified":1439120148149,"shasum":"2c318fca9bfd189251480219224f96f67ea6d7a3"}],"Category":[{"name":"网络技术","_id":"cid4ez01u0004o3d3kt2vznxs"},{"name":"数据库技术","_id":"cid4ez028000do3d3hon4ixjn"},{"name":"嵌入式linux","_id":"cid4ez02o000ko3d3lgxu98iu"},{"name":"转载文章","_id":"cid4ez036000vo3d38i2wnsda"},{"name":"hadoop","_id":"cid4ez03l0014o3d39cu4x0yl"}],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script></p>\n    </div>\n  </body>\n</html>\n\n\n","source":"404.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script></p>\n    </div>\n  </body>\n</html>\n\n\n","date":"2015-08-08T10:48:49.000Z","updated":"2015-08-08T10:48:45.000Z","path":"404.html","title":"","comments":1,"_id":"cid4eyzva0000o3d3h799r2fu"},{"_content":"layout: tags\ntitle: tags\n","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n","date":"2015-08-07T14:08:06.000Z","updated":"2015-08-07T14:08:06.000Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cid4ez0110001o3d3gaqdh7xw"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---\n","date":"2015-08-08T01:53:11.000Z","updated":"2015-08-08T01:53:11.000Z","path":"search/index.html","comments":1,"_id":"cid4ez0180002o3d3b1tpcspw"}],"Post":[{"title":"ssh 反向代理","date":"2014-10-16T18:01:01.000Z","_content":"\n为了解决无法突破对远端设备所在内网访问的限制，ssh提供了一套反向代理机制来解决问题。\n\n<!--more-->\n## 1.原理图\n\n![image description](http://7xkz95.com1.z0.glb.clouddn.com/15-8-9/58003707.jpg)\n\n## 2.使用方法\n##### 2.1 在A下\n\n```\nssh -NfR 2222:localhost:22 httpd@100.100.100.100 -p 22\n```\n（连接对方22的端口，并把B主机的2222端口 与 本地A主机的22端口映射，即建立通信线路。用httpd这个用户名登陆B主机，B主机ip为100.100.100.100）\n##### 2.2 在B下\n\n```\nssh -p 2222 exe@localhost\n```\n\n（B主机通过ssh客户端连接自己本地的2222端口，并用exe登陆远程A主机）\n\n（也可以不用输入exe@，直接输入ssh -p 2222 localhost即可）\n\n**这里需要说明的是，为了使B区分不同的远程主机，即可用端口号加以区分。**\n\n##### 2.3 为了解决内网A主机 第一次主动连接B主机时，需要输入密码的问题，还有ssh生命周期时间太短的问题。我们可以采用ssh-keygen和autossh解决。\n\na.在A主机上键入：\n```\nssh-keygen\n```\n ，依次点下去，会在~目录下的.ssh/中生成一个ida_rsa.pub的文件，把这个文件通过scp拷贝到远程主机B上\n\nb.在B主机上键入：\n```\ncat ida_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n\n此时，A主机已经免输密码。\n\nc.接着我们在A主机下安装一个autossh （ubuntu可采用apt-get install autossh安装，嵌入式设备可能需要移植）\n\n~~d.在A主机上键入 \n```\nautossh -M 5678 -NR 2222:localhost:22 root@100.100.100.100 -p 22  & \n```\n\n此时，A主机与B主机的SSH通道一直会保持在线了。~~\n\n\n##### 2.4 经测试发现，这条命令并不适用于3G网卡传输的方式，因为3G的无线传输方式本身就有传输可能会断掉的缺点。如果A主机端为一个3G网络的环境，那么需要在A主机上使用以下方法解决。\nd1.    \n```\nautossh -M 0 -q -N -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -R 44444:localhost:22 root@100.100.100.100\n```\n这条命令的作用比上一条多了一个心跳信息，就是说A主机的ssh每隔10秒会主动给B主机的sshd发送心跳信息，这时候B主机sshd会给予A主机ssh一个响应信息，这是一个过程，如果B主机没有给予ssh一个响应信息，那么ServerAliveCountMax值+1，当ServerAliveCountMax等于3时，ssh客户端认为已经断掉，这时候ssh会自己关闭相关端口和进程，然后由autossh自动启动ssh客户端，再一次连接，也就是说完成一次检测网络状态，需要30秒，如果30秒，由于网络阻塞或者其他问题，那么ssh会主动关闭。\n\nd2.   另外，由于是3G网络环境（测试发现，如果3G网络异常断开，那么autossh进程会死掉），所以需要加入一小段监控的shell脚本，定期检测autossh是否存在，如果不存在则重启，如果存在阻塞几秒继续监控。\n\nd3.   上边配置了A主机，还需要配置B主机（服务器），首先要说的是，当用d1的那条命令后，会使得服务器端ssh连接异常，也就是说putty可能登陆不上去，重启也无效（这个可能是特例，总之咱不知道具体原因），查了一些资料，说是要更改ssh客户端的配置即可（这里不明白），具体做法是/etc/ssh/ssh_config这个文件中，加入ServerAliveInterval 60即可，据说是防被踢，但是不理解。。。。。\n\nd4. 另外我们使用netstat -antp命令可以看到linux当前网络的端口占用情况。测试的时候我发现A主机的3G网络异常断开之后，A主机的autossh自然死掉了。但是在B主机netstat -antp时，还是可以看到系统在监听44444端口，后边的进程是sshd 服务端程序启动的，如果我们在B主机上不做任何设置，那么会导致B主机44444端口一直处于无效状态，即便A主机设置重新启动autossh，也无法再B主机通过44444与A主机建立连接。解决方法是打开/etc/ssh/sshd_config配置文件，在最后边添加或者更改ClientAliveIntercal 10 还有 ClientAliveCountMax 3即可，意思就是说sshd服务端程序主动去发送小心给客户端（A主机），A主机如果与B保持连接，那么肯定会给予B回复，否则不回，这样就是使得10秒之后，count值+1，直到3，sshd程序就会主动把占用端口的sshd子进程杀掉，让出端口来。这时候就等待A主机建立连接就可以了！\n> \n> 副：测试发现，也有小概率出现，在A主机端发现autossh进程在，ssh进程也在，但是在B主机端用netstat -antp发现没有在监听44444端口。这时，需要在B主机端主动杀掉netstat -antp结果中那个本地22的端口后边对应的sshd:root所在的pid号。这时，你再netstat -antp，会发现44444已经出来了，在A主机上，ps可以看到autossh进程号没有改变，但是ssh进程改变了，是因为B主机端主动杀掉了连接，所以ssh又一次重连。 \n> \n如果想要A主机重启之后，也可以保持自动ssh反向连接，那么需要追加到相应脚本下实现开机自启动。\n\n## 参考文献\n\nhttp://www.jb51.net/hack/58514.html\n\nhttp://blog.chinaunix.net/uid-20109107-id-2954579.html\n\nhttp://www.cnblogs.com/eshizhan/archive/2012/07/16/2592902.html","source":"_posts/sshreverse.md","raw":"title: ssh 反向代理    \ndate: 2014-10-16 14:01:01\ncategories: 网络技术 \ntags: [ssh反向代理,ssh,穿越内网] \n\n---\n\n为了解决无法突破对远端设备所在内网访问的限制，ssh提供了一套反向代理机制来解决问题。\n\n<!--more-->\n## 1.原理图\n\n![image description](http://7xkz95.com1.z0.glb.clouddn.com/15-8-9/58003707.jpg)\n\n## 2.使用方法\n##### 2.1 在A下\n\n```\nssh -NfR 2222:localhost:22 httpd@100.100.100.100 -p 22\n```\n（连接对方22的端口，并把B主机的2222端口 与 本地A主机的22端口映射，即建立通信线路。用httpd这个用户名登陆B主机，B主机ip为100.100.100.100）\n##### 2.2 在B下\n\n```\nssh -p 2222 exe@localhost\n```\n\n（B主机通过ssh客户端连接自己本地的2222端口，并用exe登陆远程A主机）\n\n（也可以不用输入exe@，直接输入ssh -p 2222 localhost即可）\n\n**这里需要说明的是，为了使B区分不同的远程主机，即可用端口号加以区分。**\n\n##### 2.3 为了解决内网A主机 第一次主动连接B主机时，需要输入密码的问题，还有ssh生命周期时间太短的问题。我们可以采用ssh-keygen和autossh解决。\n\na.在A主机上键入：\n```\nssh-keygen\n```\n ，依次点下去，会在~目录下的.ssh/中生成一个ida_rsa.pub的文件，把这个文件通过scp拷贝到远程主机B上\n\nb.在B主机上键入：\n```\ncat ida_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n\n此时，A主机已经免输密码。\n\nc.接着我们在A主机下安装一个autossh （ubuntu可采用apt-get install autossh安装，嵌入式设备可能需要移植）\n\n~~d.在A主机上键入 \n```\nautossh -M 5678 -NR 2222:localhost:22 root@100.100.100.100 -p 22  & \n```\n\n此时，A主机与B主机的SSH通道一直会保持在线了。~~\n\n\n##### 2.4 经测试发现，这条命令并不适用于3G网卡传输的方式，因为3G的无线传输方式本身就有传输可能会断掉的缺点。如果A主机端为一个3G网络的环境，那么需要在A主机上使用以下方法解决。\nd1.    \n```\nautossh -M 0 -q -N -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -R 44444:localhost:22 root@100.100.100.100\n```\n这条命令的作用比上一条多了一个心跳信息，就是说A主机的ssh每隔10秒会主动给B主机的sshd发送心跳信息，这时候B主机sshd会给予A主机ssh一个响应信息，这是一个过程，如果B主机没有给予ssh一个响应信息，那么ServerAliveCountMax值+1，当ServerAliveCountMax等于3时，ssh客户端认为已经断掉，这时候ssh会自己关闭相关端口和进程，然后由autossh自动启动ssh客户端，再一次连接，也就是说完成一次检测网络状态，需要30秒，如果30秒，由于网络阻塞或者其他问题，那么ssh会主动关闭。\n\nd2.   另外，由于是3G网络环境（测试发现，如果3G网络异常断开，那么autossh进程会死掉），所以需要加入一小段监控的shell脚本，定期检测autossh是否存在，如果不存在则重启，如果存在阻塞几秒继续监控。\n\nd3.   上边配置了A主机，还需要配置B主机（服务器），首先要说的是，当用d1的那条命令后，会使得服务器端ssh连接异常，也就是说putty可能登陆不上去，重启也无效（这个可能是特例，总之咱不知道具体原因），查了一些资料，说是要更改ssh客户端的配置即可（这里不明白），具体做法是/etc/ssh/ssh_config这个文件中，加入ServerAliveInterval 60即可，据说是防被踢，但是不理解。。。。。\n\nd4. 另外我们使用netstat -antp命令可以看到linux当前网络的端口占用情况。测试的时候我发现A主机的3G网络异常断开之后，A主机的autossh自然死掉了。但是在B主机netstat -antp时，还是可以看到系统在监听44444端口，后边的进程是sshd 服务端程序启动的，如果我们在B主机上不做任何设置，那么会导致B主机44444端口一直处于无效状态，即便A主机设置重新启动autossh，也无法再B主机通过44444与A主机建立连接。解决方法是打开/etc/ssh/sshd_config配置文件，在最后边添加或者更改ClientAliveIntercal 10 还有 ClientAliveCountMax 3即可，意思就是说sshd服务端程序主动去发送小心给客户端（A主机），A主机如果与B保持连接，那么肯定会给予B回复，否则不回，这样就是使得10秒之后，count值+1，直到3，sshd程序就会主动把占用端口的sshd子进程杀掉，让出端口来。这时候就等待A主机建立连接就可以了！\n> \n> 副：测试发现，也有小概率出现，在A主机端发现autossh进程在，ssh进程也在，但是在B主机端用netstat -antp发现没有在监听44444端口。这时，需要在B主机端主动杀掉netstat -antp结果中那个本地22的端口后边对应的sshd:root所在的pid号。这时，你再netstat -antp，会发现44444已经出来了，在A主机上，ps可以看到autossh进程号没有改变，但是ssh进程改变了，是因为B主机端主动杀掉了连接，所以ssh又一次重连。 \n> \n如果想要A主机重启之后，也可以保持自动ssh反向连接，那么需要追加到相应脚本下实现开机自启动。\n\n## 参考文献\n\nhttp://www.jb51.net/hack/58514.html\n\nhttp://blog.chinaunix.net/uid-20109107-id-2954579.html\n\nhttp://www.cnblogs.com/eshizhan/archive/2012/07/16/2592902.html","slug":"sshreverse","published":1,"updated":"2015-08-09T11:35:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez01f0003o3d31car7xdr"},{"title":"phpmyadmin导入excel表格->mysql","date":"2015-07-26T00:23:23.000Z","description":"介绍phpmyadmin导入excel的方法","_content":"\n### 写在开头\n帮助文档以phpMyadmin数据库建表开始，然后再到后边的用csv导入到数据库表中。写这些的目的是 因为插入的东西是中文，所以需要注意编码问题。\n<!--more-->\n### 用到的工具\nexcel，phpmyadmin，emeditor\n### 过程\n- phpMyadmin建表\n登陆lorne.pw/database中，在新建数据库中写上数据库名字 divider，整理选择utf8_general_ci，然后点击创建。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/98049354.jpg)\n\n- 选择进入数据库divider，然后选择新建一张表，写上名字dividerInfo，并写上字段5个，然后点击执行。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/10194909.jpg)\n\n- 在这张新建数据表的窗口下，点击添加各字段详细信息，如下，值得注意的是中文用varchar就好，长度写上大概的就可以：\n\n![image description](http://img-storage.qiniudn.com/15-8-8/61706716.jpg)\n\n- 在同一个窗口下，注意选择整理：然后选择utf8_general_ci，然后点击保存表就建好了。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/5406617.jpg)\n\n- 新建excel表格，编辑学生信息，如下所示：\n（注意列的顺序与表要严格一致，第一行不需要些字段名称）\n\n![image description](http://img-storage.qiniudn.com/15-8-8/20837690.jpg)\n\n- 编辑完点击文件-另存为-计算机，然后弹出对话框，点击对话框的工具-web选项-编码。\n\n\n![image description](http://img-storage.qiniudn.com/15-8-8/87494927.jpg)\n\n- 选择将此文档另存为uniconde(UTF-8),然后点击确定，此时进入第10步。\n\n\n![image description](http://img-storage.qiniudn.com/15-8-8/5380601.jpg)\n\n- 在下图中选择保存为csv格式。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/54058994.jpg)\n\n\n- 此时桌面出现csv格式后，这时就可以进入12步，把csv上传到phpMyadmin中。\n在phpMyadmin主界面，选择数据库divider，然后选择表dividerInfo，最后选择导入。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/91318425.jpg)\n\n- 选择从计算机中上传student.csv文件。其他不用管，配置如图所示。\n\n ![image description](http://img-storage.qiniudn.com/15-8-8/44047196.jpg)\n\n- 此时还需要一步，就是在桌面生成的student.csv文件，右键用windows自带的记事本打\n\n ![image description](http://img-storage.qiniudn.com/15-8-8/60755242.jpg)\n \n*** *附**\n ![image description](http://img-storage.qiniudn.com/15-8-8/28900338.jpg)\n \n** 其实有一种更为简单的方法，就是直接在桌面上右键新建一个txt，然后用自带的记事本编辑，\n比如编辑：\n11,胡威,99,三中,高一5班\n12,胡方法,10,二中,高一10班\n\n\n这个方法需要注意的事项是每个字段与每个字段之间的逗号必须要用英文的逗号。\n编辑结束后，点击文件另存为，选择编码为utf-8，保存为csv格式。这种方法不适合批量输入，因为不方便输入逗号\n**\n\n\n\n","source":"_posts/phpmyadmin.md","raw":"title: phpmyadmin导入excel表格->mysql \ndate: 2015-7-25 20:23:23\ncategories: 数据库技术 \ntags: [excel,phpmyadmin]\ndescription: 介绍phpmyadmin导入excel的方法\n---\n\n### 写在开头\n帮助文档以phpMyadmin数据库建表开始，然后再到后边的用csv导入到数据库表中。写这些的目的是 因为插入的东西是中文，所以需要注意编码问题。\n<!--more-->\n### 用到的工具\nexcel，phpmyadmin，emeditor\n### 过程\n- phpMyadmin建表\n登陆lorne.pw/database中，在新建数据库中写上数据库名字 divider，整理选择utf8_general_ci，然后点击创建。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/98049354.jpg)\n\n- 选择进入数据库divider，然后选择新建一张表，写上名字dividerInfo，并写上字段5个，然后点击执行。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/10194909.jpg)\n\n- 在这张新建数据表的窗口下，点击添加各字段详细信息，如下，值得注意的是中文用varchar就好，长度写上大概的就可以：\n\n![image description](http://img-storage.qiniudn.com/15-8-8/61706716.jpg)\n\n- 在同一个窗口下，注意选择整理：然后选择utf8_general_ci，然后点击保存表就建好了。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/5406617.jpg)\n\n- 新建excel表格，编辑学生信息，如下所示：\n（注意列的顺序与表要严格一致，第一行不需要些字段名称）\n\n![image description](http://img-storage.qiniudn.com/15-8-8/20837690.jpg)\n\n- 编辑完点击文件-另存为-计算机，然后弹出对话框，点击对话框的工具-web选项-编码。\n\n\n![image description](http://img-storage.qiniudn.com/15-8-8/87494927.jpg)\n\n- 选择将此文档另存为uniconde(UTF-8),然后点击确定，此时进入第10步。\n\n\n![image description](http://img-storage.qiniudn.com/15-8-8/5380601.jpg)\n\n- 在下图中选择保存为csv格式。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/54058994.jpg)\n\n\n- 此时桌面出现csv格式后，这时就可以进入12步，把csv上传到phpMyadmin中。\n在phpMyadmin主界面，选择数据库divider，然后选择表dividerInfo，最后选择导入。\n\n![image description](http://img-storage.qiniudn.com/15-8-8/91318425.jpg)\n\n- 选择从计算机中上传student.csv文件。其他不用管，配置如图所示。\n\n ![image description](http://img-storage.qiniudn.com/15-8-8/44047196.jpg)\n\n- 此时还需要一步，就是在桌面生成的student.csv文件，右键用windows自带的记事本打\n\n ![image description](http://img-storage.qiniudn.com/15-8-8/60755242.jpg)\n \n*** *附**\n ![image description](http://img-storage.qiniudn.com/15-8-8/28900338.jpg)\n \n** 其实有一种更为简单的方法，就是直接在桌面上右键新建一个txt，然后用自带的记事本编辑，\n比如编辑：\n11,胡威,99,三中,高一5班\n12,胡方法,10,二中,高一10班\n\n\n这个方法需要注意的事项是每个字段与每个字段之间的逗号必须要用英文的逗号。\n编辑结束后，点击文件另存为，选择编码为utf-8，保存为csv格式。这种方法不适合批量输入，因为不方便输入逗号\n**\n\n\n\n","slug":"phpmyadmin","published":1,"updated":"2015-08-09T05:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez027000co3d3jb63tawa"},{"title":"OpenWRT编译之360路由器C301","date":"2014-10-16T18:01:01.000Z","_content":"\n备忘录分为三部分来描述，尽量做的详细一些，也算是给后人的一个参考。\n一.刷写第三方的uboot（刷不死的u-boot）\n\n二.编译内核（定制基础功能）\n\n三.OpenWRT挂3G网卡（华为E3276）\n\n<!--more-->\n## 一.刷写第三方的uboot（刷不死的u-boot）\n今天拿到手的360 c301，在官方系统的uboot上直刷 第三方 openwrt 。\n按住复位键，然后上电，10秒后待前边的灯 闪烁后 即表示 进入了uboot\n然后主机端 Ip要设置成192.168.1.x网段，这时候登陆web界面192.168.1.1就可以进入了官方自带的uboot，然后选择刷入 \n\n```\n//广告: 981213 大神的360路由全功能openwrt rom链接 http://www.right.com.cn/forum/thread-147319-1-1.html\n```\n我用的是flash1的。刷好之后，然后固件就成为了openwrt，这时候其实已经可以用了，但是为了以防万一，\n在之后的操作过程中，可能会损坏uboot，所以采用第三方的刷不死的Uboot, 这样自己编译的内核或者其他第三方的固件都\n随便刷了。\n之后：\n> 1.进入openwrt WEB界面把初始化的密码改成自己的    \n2.然后用winSCP客户端的SCP命令把我们提前下好的第三方刷不死uboot（http://www.right.com.cn/forum/thread-136444-1-1.html）传入路由器  \n3.用ssh登陆，并在/tmp目录下运行mtd write -r /tmp/u-boot.bin u-boot 命令刷入boot，这时路由器会自动重启    \n4.待重启好后即刷好了   \n5.以后所有的更新固件的操作，都要通过这个第三方的u-boot来做。（按下RESET键，上电等待10秒，再进入192.168.1.1,刚测试下，貌似只能用自带的网线。。。。。还有要注意的事，在更新的过程中，一定要用firefox或者chrome）\n\n## 二.编译openwrt\n\n#### 2.1    搭建编译环境\n我这边的环境是VMware下的ubuntu12.04，网上有说ubuntu版本最好用32位，64位可能有问题。另外需要apt-get一些基础的库和软件，如果缺少这一步，可能编译的过程中会报错，有可能缺少工具，如git，也有可能缺少库、头文件。\n```\nsudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip zip unrar p7zip p7zip-rar p7zip-full sharutils subversion libncurses5-dev ncurses-term zlib1g-dev gawk git-core  libpcre3-dev libssl-dev\n\n```\n\n#### 2.2    首先down下一份源码（分为两种，一种是trunk版，即开发版，另外一种是Barrier Breaker，即稳定版）\n由于我的这个C301官方支持只有trunk版，所以down的这个版本的，down分为两种，一种是svn，另外一种是git。\n\n```\nsvn co svn://svn.openwrt.org/openwrt/trunk/\n//接着到trunk目录下 \n./scripts/feeds update -a      //据说这部目录是更新package目录\n./scripts/feeds install -a      //安装package索引文件，这些文件个人感觉只是安装了一个索引，等编译的时候还要按需（make menuconfig）从指定地点下载\n```\n#### 2.3 接着就是配置了，这一步个人也许是整个编译的核心了，你所需要的功能都要在这步去做好。\n```\n //在源码目录下敲\n    make menuconfig \n```\n(测试发现，第一次make menuconfig 必须用普通用户，不能是root，所以如果是root下载的源码，记得要把整个源码目录chmod 777 \\*/\\* -R下，然后切换到普通用户，make menuconfig，以后再make menuconfig就不用普通用户了，root也可以的！)\n\n***以下是我从百度文库摘的极路由1S*，但是都大同小异，一些基础的配置按照这个来就够。**\n```\n选择LuCI 配置（web网页管理程序）：\nLuCI  ---> 1. Collections  --->  luci                                         启用LuCI\nLuCI  ---> 3. Applications  ---> luci-app-commands                         网页Shell \nLuCI  ---> 3. Applications  ---> luci-app-ddns                                动态域名\nLuCI  ---> 3. Applications  ---> luci-app-firewall                              防 火 墙\nLuCI  ---> 3. Applications  ---> luci-app-mwan3                              网络叠加\nLuCI  ---> 3. Applications  ---> luci-app-multiwan                            网络叠加\nLuCI  ---> 3. Applications  ---> luci-app-ntpc                           时间同步服务器\nLuCI  ---> 3. Applications  ---> luci-app-ocserv                           VPN Server\nLuCI  ---> 3. Applications  ---> luci-app-qos\nLuCI  ---> 3. Applications  ---> luci-app-samba                               网络共享\nLuCI  ---> 3. Applications  ---> luci-app-upnp\nLuCI  ---> 3. Applications  ---> luci-app-wol                                  网络唤醒\nLuCI  ---> 4. Themes  ---> luci-theme-bootstrap                             默认主题\nLuCI  ---> 4. Themes  ---> luci-theme-openwrt                          openwrt主题\nLuCI  ---> 5. Translations  --->  luci-i18n-chinese                            支持中文\n大家可以自行增减插件，保存设置后，重新编译下即可。\n \n文件系统、SD卡、USB配置：\nBase system  --->  block-mount                                              USB挂载\nKernel modules  --->  Filesystems  --->  kmod-fs-ext4              支持ext4文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-nfs                支持NFS文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-nfs-common\nKernel modules  --->  Filesystems  --->  kmod-fs-ntfs              支持NTFS文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-vfat             支持FAT32文件系统\nKernel modules  --->  Native Language Support  --->  kmod-nls-cp437       支持中文\nKernel modules  --->  Native Language Support  --->  kmod-nls-iso8859-1   支持中文\nKernel modules  --->  Native Language Support  --->  kmod-nls-utf8         支持中文\nKernel modules  --->  Other modules  --->  kmod-mmc                     支持SD卡\nKernel modules  --->  Other modules  --->  kmod-sdhci                     支持SD卡\nKernel modules  --->  Other modules  --->  kmod-sdhci-mt7620            支持SD卡\nKernel modules  --->  USB Support  --->  kmod-usb-ohci                 支持USB 1.0\nKernel modules  --->  USB Support  --->  kmod-usb-storage\nKernel modules  --->  USB Support  --->  kmod-usb-storage-extras\nKernel modules  --->  USB Support  --->  kmod-usb-uhci                 支持USB 1.1\nKernel modules  --->  USB Support  --->  kmod-usb2                     支持USB 2.0\n \n网络配置：\nNetwork  --->  ppp-mod-pppoe                                           PPPOE拨号模式\nNetwork  --->  ppp-mod-pptp                                                 VPN客户端\nNetwork  --->  SSH  --->  openssh-client                                    SSH客户端\n其实里面有很多软件，大家可以编译试一试的，番茄软件很多的哦！~\n \n应用程序配置：\nUtilities  --->  bzip2                                                            解压缩工具\nUtilities  --->  Compression  --->  unrar                                       解压缩工具\nUtilities  --->  Compression  --->  unzip                                       解压缩工具\nUtilities  --->  Compression  --->  zip                                           压缩工具\nUtilities  --->  Filesystem  --->  badblocks                             支持ext2文件系统\nUtilities  --->  Filesystem  --->  e2fsprogs                 支持ext2/ext3/ext4格式化工具\nUtilities  --->  disc  --->  fdisk                                                   分区工具\n```\n\n除了上边的配置，以下我标注几个对自己需求比较重要的，其他的省略\n\n第一个Target System ，这里边就是要选你的路由器所对应的cpu的型号。如果路由器有两颗芯片，以第一个cpu为主，C301路由器主芯片为AR9344，所以我选择Atheros AR7XXX / AR9XXX,这个可能要靠一些经验了，我对硬件的芯片区分的也不是很好，最好去相应的论坛找找路由器对应的芯片类型。\n\n第二个Subtarget，选择Generic即可。这一步我不是特别明白，这一选项跟你上边的targetsystem有关，如果换一个芯片的话，这里可能还要选择对应的版本，目前尚不清晰。\n    \n第三个target profile 选择路由器型号。一般比较通用。\n    \n> （我down了一份BB版的源码，在这里找qihooC301没有找到，所以就是不支持，后来算下日子才知道，恩山的HACK大哥9月份才提交的patch，正式被官方录用。bb是7月出来的，肯定没有了！这里啰嗦几句，什么Kamikaze ，backfire ，attitude adjustment， barrier breaker 和trunk都是什么意思，之前我也模糊，后来去官方wiki，https://dev.openwrt.org/wiki/GetSource，感觉标注跟linux一贯的风格差不多，ubuntu两年一个正式版，openwrt最近也是两年，但时间并不确定，所以这样来看我也就清楚了。前面的这几个都是openwrt的正式版本，从老版本到最新版本，都是稳定版。后边的这个trunk是开发版，也就是功能涵盖barrier breaker，但是还在慢慢的添加新功能。所以如果你不是特意的获取trunk的老版，你获取到的永远是最新的，trunk官方源码一两天就更新一次,更新速度特别快，可以用svn log 网址来看下）\n\n这几个大选项 global build settings ,advaced configureation options , build the openwrt image builder ,build the openwrt sdk ,package the openwrt-based toolchain ,image configuration 目前我还没用到，所以不清楚具体含义和用法。\n\n  在大项Base system下，基本上没有动，还是按照op默认的配置来做的，值得要说的是，这里边的busybox，大家都知道busybox是一个嵌入式的linux shell集成工具，嵌入式的linux基本上所有的命令都是出自这里边（我所说的当然不包括一些第三方的package软件包的命令了）。如果有需求，可以进去打开一些命令，比如lsusb就可以在这里边打开，不然默认是没有的，除非你在其它的package安装usbutils（在大项utils下）。\n\n    Administrator默认。\n\n    Boot Loaders 默认。\n\n    Devlopment 默认。\n\n    Firmware 默认。\n    \n大项Kernel modules，这里边的选项，个人感觉是最重要的一个了，有很多功能如果这里边不选择好，那么将会非常麻烦，以后的固件可能很多功能用不了。结合我自己的C301进行定制。对于需要的功能。首先是无线，C301是双频的wifi，有2.4G和5G，分为两个网卡。所以在这里边的Wireless Drivers把Kmod-ath10k和kmod-ath9k，kmod-ath9k-common都要选上！因为C301自带一个usb口，所以我们进入usb support,把kmod-usb-core kmod-usb-ohci kmod-usb-storage-extras kmod-usb-uhci kmod-usb2都选上。在network support 下，把ppp的选项都选上，不然 无法拨号上网。由于360这个路由器还有一个LED，所以还要选下LED modules，我选的是gpio defaulton ledtrig gpio timer usbdev，这几项选上，我这边led显示是正常的，不过跟官方的那种亮不一样，我这个是一闪一闪的，不过感觉还可以！！！！内核在结合上边的就差不多了。\n\n还有比较重要的两个，这两个是个性化 定制的东西，一般的package小软件，都在这两个下面。功能非常丰富而且强大！\n按照我目前的需求来的，我用到了network下的File transfer下的lftp，这是一个ftp的客户端，我这需求类似的可能比较小。还有SSH这里边我全选了。VPN也可以选。。。至于utilities里边，我用到了usbutils和usb-modeswitch（挂3G网卡）\n\n至此。配置结束了。\n\n> 接下来还有很重要的一步才可以编译。这也算是openwrt官方Trunk的一个BUG（至少在现在14年10月份没有解决呢），估计以后会修复的。\n就是如果配置结果make，然后编译好的固件，你刷上去是没有无线的（2.4G和5G都没办法启动），所以需要替换掉一个目前源码工程目录下的mac80211下的东西。具体做法：\n在现在用的trunk源码目录外新建一个文件夹testop，然后进入testop，down一份之前的代码。svn co -r42681 svn://svn.openwrt.org/openwrt/trunk，之所以用这个版本，是因为这个版本的的2.4G是正常的，（也就是说5G不正常，所以不能用，但现在wifi大多数还是2.4G的！），down下来之后，然后把test源码目录下的pakcage/kernel/mac80211/Makefile和pakcage/kernel/mac80211/patches替换到之前的trunk源码的package/kernel/mac80211下。\n\n这时配置才算真正结束。\n\nmake V=99 或者 make j=cpu核数+1 都可以，就执行编译了。\n编译完之后会在源码目录下的bin下生诚ar7XXX的文件夹，打开之后就会看到我们的固件和packages包，这个包是好东西，因为和你的路由器是配套的，里边的软件你路由器可以直接安装。并不是所有ipk结尾的文件都能在路由器上安装，也并不是同一个cpu平台的通用，也可以说同型号的路由器ipk都可能不通用。所以这个文件夹的packages还是很有用的，保存好，之后做一个局域网软件源，从路由器直接到这里下载软件就可以了。。\n\n## OpenWRT挂3G网卡（华为E3276）\n\n首先要说的是，华为的大部分3G网卡都支持linux，也就是说openwrt只要是配置好，是完全能够支持的（当然你需要有一个usb口）.\n\n我们需要几个东西，PPP、usb-serial、usb-modeswitch,与此同时，usb的一些选项也要加进去，例如USB2.0、usb1.0、usb-storage等。\n我们所需要的是在/dev/目录下看到ttyUSB0和ttyUSB1，虽然linux驱动能够识别3G网卡，但是如果想让其工作，还需要使之拨号，这就需要ttyUSB0这个接口了，我们可以把她想象成以太网口，例如eth1。原来广域网口wan出去是从eth1走的，现在wan出去是通过ttyUSB0。另一方面，据说在BB版本（openwrt 14.07）没有出现之前，我们即便装了usb-serial也不能看到/dev/下有ttyUSB,还需要设置才可以（老版本的设置请参照下边的某老外论坛上的参考文献，另外为了识别你网卡产品的Device ID,你在openwrt下需要一个命令，lsusb，这个命令你在编译openwrt的时候可以在busybox里选上，也可以勾选上在Utilities/下的USButils）。话说回来，现在的BB版和trunk版就方便多了，直接在内核中选上usb-serial就可以看到/dev/ttyUSB0和/dev/ttyUSB1了。\n\n这几个东西具体的位置，usb-serial在内核目录下的USB support下，值得一提的是，你需要把Kmod-usb-serial-option和kmod-usb-serial-wwan、还有mod-us-serial-ipw选上。ppp在network模块下，一般这个都会编的。。。usb-modeswitch在Utilities下。USB的一些常用选项都在内核目录下的USB SUPPORT下。\n\n\n配置好了。然后就可以编译进固件中了。\n\n至于启动3G拨号。有两种方式，一个是shell中的操作，一个是web页面的操作。我用的是web上的操作，在网络，接口，找到wan，点击修改。\n然后在协议中找到UMTS/GPRS/EV-DO这一项。点击切换协议，然后在调制解调器节点 选择/dev/ttyUSB0,服务类型选择UMTS/GPRS (即3G/2G网)其他的留空就可以直接点保存应用了。过一会就看到ISP给分配的ipv4地址了。ping下外网是可以通的。\n\n切换到原来的上网模式，选择原来的模式即可，我这边的环境是dhcp自动分配的，我就选择dhcp自动获取ip。然后点击保存会提示物理的端口需要选择，点击物理设置，桥接接口 不选，直接选中接口中的eth1即可，因为eth1对应于路由器上的wan口。\n\n\n至此3G配置结束！\n副：路由器如果只有一个USB口，请慎用USB-HUB，经本人实际测试，插USB-HUB确实可以使用，3G网卡，U盘，都可以用，这几天一直有个ssh的连接在用，我发现ssh总是无故断掉，找了好半天原因找不到。ps发现pppd这个进程总是断掉重启，所以我用ping 外网ip的方式发现，一分钟到两分钟就会使3G网断掉，于是我怀疑是接了USB-HUB的原因，我果断把USB-HUB撤掉，直接插在路由器的USB接口上，在测试ping外网，发现ping完全正常，目前已经ping了4000秒左右了，没有出现网络断开。所以可以确定是USB-HUB导致3G网卡供电不足。慎用！！！如果确有需求，推荐X宝买一款带供电的hub。\n\n\n## 四.对编译的问题和总结\n\n#### 4.1    在编译的过程中难免会出现一个问题，比如说，我们down的这份源码中，make menuconfig没有这个某个软件怎么办？很多人都是通过刷好固件opkg install xx解决，但是经实验证实，很难下载成功，或者下载成功安装不上，具体原因还我并不清楚。。所以我在想有些软件，我这个trunk版本没有，以前的trunk版本有没有？整个trunk版本都没有，那么BB正式版有没有？\n解：假如我们down一份之前的代码或者正式版代码，在源码工程目录下，linux下可以用find . -name xxx来找你想要的软件包（当然名字要首先明确下来），这时候如果找到的话，一般来说这个文件夹都是一个索引文件（目前个人的感觉，对源码目录及结构细节和Makefile的组织并没有深究过），里边会有Makefile和子文件夹file，file中又有几个文件。把这个软件的文件夹（一般路径不确定，比如feeds/packages/net/autossh）拷贝到我们自己的源码目录下的package下（这个路径是明确规定的，不能是其他的），所以按照这种思路，以后就不是去满世界找ipk了，自己编译一个更加方便，而且肯定兼容！\n\n然后有两个方式来完成你想要的功能，主要看你的需求，第一个是直接编译出ipk文件，另外一个是编译出新的包含此软件功能的固件。\n```\n第一个方式用几个指令即可：\n说先解释下 即为你拷贝来的软件包。\nmake package//prepare V=99 \n//这个命令是根据软件中的Makefile中的路径去指定URL下载软件包源码，并放在dl目录下，具体解压到哪里还没有研究- -！\n//敲完这个命令会有个警告，告诉你重新make menuconfig一下。因为这时候menuconfig就可以看到新的功能了哦\n//一般新的功能都在图形配置界面的network下或者utilities下，仔细找找可以看到。\nmake package//compile V=99   \n//这个是编译命令，编译完之后就可以在bin目录的相应位置找到，但是我发现目录下会多出好多个ipk\n//可能其中还有关联关系，就是可能生成很多个ipk，可能光安装一个不能安装上。。安装的过程没测试过。\n\n\n```\n\n\n```\n//另外提供一些命令，这些命令没有完全用过。（摘自官方wiki）\nTroubleshooting\n\nIf you find your package doesn’t show up in menuconfig, try the following command to see if you get the correct description:\n    TOPDIR=$PWD make -C package/ DUMP=1 V=99\nIf you’re just having trouble getting your package to compile, there’s a few shortcuts you can take. Instead of waiting for make to get to your package, you can run one of the following:\n\nmake package//clean V=99\nmake package//install V=99\nAnother nice trick is that if the source directory under build_dir/ is newer than the package directory, it won’t clobber it by unpacking the sources again. If you were working on a patch you could simply edit the sources under the build_dir// directory and run the install command above, when satisfied, copy the patched sources elsewhere and diff them with the unpatched sources. A warning though - if you go modify anything under package/ it will remove the old sources and unpack a fresh copy.\nOther useful targets include:\n\nmake package//prepare V=99\nmake package//compile V=99\nmake package//configure V=99\n```\n用以上这些命令的前提是，你已经搭建好了一个完整的编译环境（就是说你make过固件，不然没有交叉编译工具，你编译不了软件）\n\n第二种方式是，你用完\n```\nmake package//prepare V=99\n```\n\n命令后menuconfig中已经可以看到你所需要的软件了，直接make V=99 编译新固件！\n\n\n#### 4.2 对于定制文件系统\n\n\n在源码目录下的package/base-files/files下就是openwrt的文件系统。这里只有简单的几个，其他的一些目录都是在编译的时候生成的。\n本人实际测试，发现可以在这个目录下任意位置添加自己的配置文件或者脚本，编译固件的过程中，编译器会把这个目录全部拷贝走的。\n如果需要开机启动脚本，在etc/rc.local中添加，但要记得如果调用你的脚本是一个while无限循环的，那么需要在脚本名的后边加后台运行，即&\n不然会导致exit 0无法执行，到时候reboot这些命令不可用。\nopenwrt大部分基础文件都在软件包base-files里面。这个软件包做3件事：\n\n1 复制package/base-files/files下的所有文件到根目录\n\n2 复制target/linux/对应平台/base-files下的所有文件到根目录\n\n3 复制源码根目录下的files文件夹下的所有文件到根目录（如果需要添加自己的文件那么可以通过这一步，即在源码根目录内新建一个files文件夹）\n#### 4.3.解决目前trunk版无法正常使用校园web认证\n\n这个问题困扰了很久，这几天有时间所以就找了下问题。问题找了好多，编译了很多次，最后把问题定位到了mwan上。\n\n所在的环境为校园网，上网会跳转web认证页面，然后30秒之后认证页面就弹不出来了，打开任何网页无果。ping上层网关通，ping同级ip通，把网线拔了重新插在wan口上，又会有几十秒的时间跳转，过了这个时间就又不正常了。由于在校园，所在环境为自然的双栈地址，装了一个6relayd，按理说v4地址和v6地址都能获取到，v4不正常，v6应该正常，可是ipv6同样不正常。\n\n经测试发现，插上wan口上，然后这时候随便刷新网页会有弹出认证页面，然后过一会就认证不了了。这时候再查看路由器web页面的系统日志信息\n，发现确实有异常，于是尝试几次相同的操作，发现可以锁定问题。\n```\nSun Nov  2 04:44:07 2014 user.notice mwan3: ifup interface wan (eth1)\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: reading /tmp/resolv.conf.auto\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using local addresses only for domain lan\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using nameserver 210.45.240.99#53\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using nameserver 8.8.8.8#53\nSun Nov  2 04:44:08 2014 user.notice firewall: Reloading firewall due to ifup of wan (eth1)\nSun Nov  2 04:44:10 2014 daemon.notice netifd: Interface 'wan6' is now up\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for br-lan detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for lo detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for eth1 detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for eth1 detected\nSun Nov  2 04:44:11 2014 user.notice root: starting ntpclient\nSun Nov  2 04:44:11 2014 user.crit ddns-scripts[2421]: myddns_ipv4: CRITICAL ERROR - Service Configuration is disabled - EXITING\nSun Nov  2 04:44:11 2014 daemon.warn 6relayd[1567]: A default route is present but there is no public prefix on br-lan thus we don't announce a default route!\nSun Nov  2 04:44:11 2014 daemon.warn odhcpd[1379]: A default route is present but there is no public prefix on br-lan thus we don't announce a default route!\nSun Nov  2 04:44:12 2014 daemon.err miniupnpd[2508]: could not open lease file: /var/upnp.leases\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: HTTP listening on port 5000\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: HTTP IPv6 address given to control points : [fdc0:8c3b:8d0::1]\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: Listening for NAT-PMP/PCP traffic on port 5351\nSun Nov  2 04:44:13 2014 user.notice firewall: Reloading firewall due to ifup of wan6 (eth1)\nSun Nov  2 04:44:13 2014 user.crit ddns-scripts[2593]: myddns_ipv6: CRITICAL ERROR - Service Configuration is disabled - EXITING\nSun Nov  2 04:44:13 2014 daemon.warn 6relayd[1567]: Termination requested by signal.\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /etc/hosts - 1 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/odhcpd - 1 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/6relayd - 0 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/dhcp - 1 addresses\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: starting ssh (count 11)\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: ssh child pid is 2685\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: ssh exited with error status 255; restarting ssh\nSun Nov  2 04:44:42 2014 user.notice mwan3track: Interface wan (eth1) is offline\nSun Nov  2 04:44:42 2014 user.notice mwan3: ifdown interface wan (eth1)\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: starting ssh (count 12)\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: ssh child pid is 2795\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: ssh exited with error status 255; restarting ssh\nSun Nov  2 04:44:49 2014 user.notice root: stopping ntpclient\n```\n观察可发现，插上网线会有mwan打开接口eth1，然后这时候可以通过认证，然后过一会没认证了，这时发现正好会出现mwan4track和mwan3 把eth1关掉了。（实际上，我在路由器shell中查看并没有关掉eth1）\n\nmwan3是一个多拨的软件，我个人认为这个软件可能会尝试几次多播，不成功就停止运行，可能与我们校园的web认证冲突。\n目前down下来的openwrt源码，默认的menuconfig中已经把mwan加到编译选项上。所以才会出现这种情况！\n问题找到了，解决问题办法是删掉mwan3和mwan3track。ps观察在/usr/sbin/下，删除，重启，于是问题解决。\n最终解决办法在编译openwrt的时候把mwan取消即可。\n```\nNetwork-->Routing and Redirection--->mwan3\nLuCI-->Application-->luci-app-multiwam\nLuCI-->Application-->luci-app-mwan3\n```\n\n#### 4.4 Openwrt安装pptp客户端\n\n需要两个包，一般的固件中，可能都集成了。\n一个是ppp-mod-pptp，另一个是luci-proto-pptp。\n\n具体的配置可以在luci界面上配置，接口-网络-添加新接口，然后选择协议为pptp即可。\n输入user,password,server即可。\n\n另外比较重要的一部是在/etc/ppp/options和/etc/ppp/options.pptp文件中。以下为自己的配置文件。\n```\nroot@OpenWrt:/etc/ppp# cat options\n#debug\nlogfile /dev/null\n#noipdefault\n#noaccomp\n#nopcomp\n#nocrtscts\n#lock\n#maxfail 0\n#lcp-echo-failure 5\n#lcp-echo-interval 1\n\n```\n\n\n```\nroot@OpenWrt:/etc/ppp# cat options.pptp\nnoipdefault\nnoauth\nnobsdcomp\nnodeflate\nidle 0\nmppe required,no40,no56,stateless\nmaxfail 0\nrefuse-eap\nrefuse-pap\n\n```\n\n#### 4.5 HP 1020 plus打印机--->网络共享打印机\n\n> 所需模块：kmod-usb-printer、p910nd、luci-app-p910nd\n\n> 打印的原理即：\npc把要打印的文档通过打印机驱动封装后成为打印机可识别的数据，发送给路由器端，路由器端由p910nd监听程序进行转发，把接到的数据转发给打印机。所以路由器端是不需要驱动程序的，只要保证p910nd进程能够正常运行即可。\n\n**具体配置（a,b,c,d）：**\n\na.由于惠普的低端打印机（类似于LaserJet 1010 1008 1009 1020 等）本身并不是自带firmware，我们每次打印的时候都是由PC端的驱动程序发送给打印机一个firmware。这个firmware在打印机的内存中，掉电后firmware就没了。基于打印机断电后不能够正常使用的问题，就是因为没有firmware的原因。firmware常用下载地址http://oleg.wl500g.info/hplj/ 找到自己的下载即可。也可以自己去编译，然后把编译出来的固件扔到路由器的/lib目录下。编译的过程参考http://wiki.openwrt.org/doc/howto/p910nd.server?s[]=p910nd\n\n所以我们可以通过一个热插拔的脚本来做，每次usb接到路由器时，就把firmware这个固件推送到打印机上（所以每次插路由器的时候会听到打印机呗驱动的声音）。然后再进行打印即可。usb的热插拔采用hotplug模块，这个一般op中都是自带的了。\n配置文件的位置在/etc/hotplug.d/usb/下。名字叫做20-usb_mode。可参考我的配置文件。\n```\n#!/bin/sh\nset -e\n\n# change this to the location where you put the .dl file:\nFIRMWARE=\"/lib/sihp1020.dl\"\nDEVICE=/dev/usb/lp0\nLOGFILE=/var/log/hp\n\nif [ \"$PRODUCT\" = \"3f0/2b17/100\" -a \"$ACTION\" = \"add\" ]; then\nfor i in $(seq 30); do\nif [ -c $DEVICE ]; then\necho \"$(date) : Sending firmware to printer…\" > $LOGFILE\nnc 192.168.14.55 9109 < /lib/sihp1020.dl\necho \"$(date) : done.\" ? $LOGFILE\nexit\nfi\nsleep 1\ndone\nfi\n```\nb.做完以上的步骤之后，并在/etc/rc.local下编辑如下内容，使p910nd进程自启。\n```\n/etc/init.d/p910nd start &\n\nexit 0\n```\n\nc.另外在luci管理界面上，把p910nd的配置中，接口选择wan口。启用前勾上。bidirectional mode(双向模式)不要打钩。\n\n也可参考配置文件。/etc/config/p910nd\n\n\n```\nconfig p910nd\n        option device '/dev/usb/lp0'\n        option enabled '1'\n        option bind '192.168.14.55'\n        option port '9'\n```\nd.在PC端，首先需要安装系统的驱动程序。\n有两种方式，第一种是从百度上直接搜索驱动，然后插上打印机的usb到电脑上，安装驱动。\n另一种方式不用插usb，直接在控制面板中，添加打印机，网络打印机，然后选择ip和端口名，然后windows update找到打印机响应型号\n安装即可。\n\n第一种安装完之后拔掉usb后，双击1020打印机，然后在左上角的打印下，把脱机打印取消。然后右击1020打印机，选择端口，添加端口，\n把ip和端口号写好，其他的默认，确认。还有重要的一步是，把双向打印前的勾一定要取消掉，不然会出现重复打印的情况。\n\n第二种安装完之后即可使用。注意 双向打印去掉。。\n\n***稳定性*：**\n还算可靠，在打印的时候，如果不能保证纸张充足的情况下打印，最后剩下的没有纸张了就不能够打印了，你在pc上再选择打印也不可以。\n这时候需要把打印机usb从路由器上拔掉，等待3秒后重新插上，然后打印机就会把剩余的任务打印出来。\n\n\n## 五 参考文献：\n\nhttp://blog.csdn.net/qingfengtsing/article/details/39344327\nhttp://blog.csdn.net/jk110333/article/category/1148871\nhttp://openwrt.diandian.com/post/2014-09-16/40062999348\nhttps://downloads.openwrt.org/kamikaze/docs/openwrt.html\nhttps://dev.openwrt.org/wiki/GetSource\nhttp://chaochaoblog.com/archives/1011\nhttp://www.right.com.cn/forum/thread-146084-1-1.html\nhttp://wenku.it168.com/d_000649332.shtml\nhttp://www.right.com.cn/forum/thread-147651-1-1.html\nhttp://www.right.com.cn/forum/thread-148069-1-1.html\nhttp://www.right.com.cn/forum/home.php?mod=space&uid=200302&do=thread&type=thread&view=me&from=space\nhttp://wenku.baidu.com/view/85d69c56ee06eff9aef80777.html\nhttps://forum.openwrt.org/viewtopic.php?id=50795\nhttps://github.com/pichuang/openvwrt","source":"_posts/openwrt.md","raw":"title: OpenWRT编译之360路由器C301    \ndate: 2014-10-16 14:01:01\ncategories: 嵌入式linux \ntags: [uboot定制,内核编译,打印机共享,openwrt] \n\n---\n\n备忘录分为三部分来描述，尽量做的详细一些，也算是给后人的一个参考。\n一.刷写第三方的uboot（刷不死的u-boot）\n\n二.编译内核（定制基础功能）\n\n三.OpenWRT挂3G网卡（华为E3276）\n\n<!--more-->\n## 一.刷写第三方的uboot（刷不死的u-boot）\n今天拿到手的360 c301，在官方系统的uboot上直刷 第三方 openwrt 。\n按住复位键，然后上电，10秒后待前边的灯 闪烁后 即表示 进入了uboot\n然后主机端 Ip要设置成192.168.1.x网段，这时候登陆web界面192.168.1.1就可以进入了官方自带的uboot，然后选择刷入 \n\n```\n//广告: 981213 大神的360路由全功能openwrt rom链接 http://www.right.com.cn/forum/thread-147319-1-1.html\n```\n我用的是flash1的。刷好之后，然后固件就成为了openwrt，这时候其实已经可以用了，但是为了以防万一，\n在之后的操作过程中，可能会损坏uboot，所以采用第三方的刷不死的Uboot, 这样自己编译的内核或者其他第三方的固件都\n随便刷了。\n之后：\n> 1.进入openwrt WEB界面把初始化的密码改成自己的    \n2.然后用winSCP客户端的SCP命令把我们提前下好的第三方刷不死uboot（http://www.right.com.cn/forum/thread-136444-1-1.html）传入路由器  \n3.用ssh登陆，并在/tmp目录下运行mtd write -r /tmp/u-boot.bin u-boot 命令刷入boot，这时路由器会自动重启    \n4.待重启好后即刷好了   \n5.以后所有的更新固件的操作，都要通过这个第三方的u-boot来做。（按下RESET键，上电等待10秒，再进入192.168.1.1,刚测试下，貌似只能用自带的网线。。。。。还有要注意的事，在更新的过程中，一定要用firefox或者chrome）\n\n## 二.编译openwrt\n\n#### 2.1    搭建编译环境\n我这边的环境是VMware下的ubuntu12.04，网上有说ubuntu版本最好用32位，64位可能有问题。另外需要apt-get一些基础的库和软件，如果缺少这一步，可能编译的过程中会报错，有可能缺少工具，如git，也有可能缺少库、头文件。\n```\nsudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip zip unrar p7zip p7zip-rar p7zip-full sharutils subversion libncurses5-dev ncurses-term zlib1g-dev gawk git-core  libpcre3-dev libssl-dev\n\n```\n\n#### 2.2    首先down下一份源码（分为两种，一种是trunk版，即开发版，另外一种是Barrier Breaker，即稳定版）\n由于我的这个C301官方支持只有trunk版，所以down的这个版本的，down分为两种，一种是svn，另外一种是git。\n\n```\nsvn co svn://svn.openwrt.org/openwrt/trunk/\n//接着到trunk目录下 \n./scripts/feeds update -a      //据说这部目录是更新package目录\n./scripts/feeds install -a      //安装package索引文件，这些文件个人感觉只是安装了一个索引，等编译的时候还要按需（make menuconfig）从指定地点下载\n```\n#### 2.3 接着就是配置了，这一步个人也许是整个编译的核心了，你所需要的功能都要在这步去做好。\n```\n //在源码目录下敲\n    make menuconfig \n```\n(测试发现，第一次make menuconfig 必须用普通用户，不能是root，所以如果是root下载的源码，记得要把整个源码目录chmod 777 \\*/\\* -R下，然后切换到普通用户，make menuconfig，以后再make menuconfig就不用普通用户了，root也可以的！)\n\n***以下是我从百度文库摘的极路由1S*，但是都大同小异，一些基础的配置按照这个来就够。**\n```\n选择LuCI 配置（web网页管理程序）：\nLuCI  ---> 1. Collections  --->  luci                                         启用LuCI\nLuCI  ---> 3. Applications  ---> luci-app-commands                         网页Shell \nLuCI  ---> 3. Applications  ---> luci-app-ddns                                动态域名\nLuCI  ---> 3. Applications  ---> luci-app-firewall                              防 火 墙\nLuCI  ---> 3. Applications  ---> luci-app-mwan3                              网络叠加\nLuCI  ---> 3. Applications  ---> luci-app-multiwan                            网络叠加\nLuCI  ---> 3. Applications  ---> luci-app-ntpc                           时间同步服务器\nLuCI  ---> 3. Applications  ---> luci-app-ocserv                           VPN Server\nLuCI  ---> 3. Applications  ---> luci-app-qos\nLuCI  ---> 3. Applications  ---> luci-app-samba                               网络共享\nLuCI  ---> 3. Applications  ---> luci-app-upnp\nLuCI  ---> 3. Applications  ---> luci-app-wol                                  网络唤醒\nLuCI  ---> 4. Themes  ---> luci-theme-bootstrap                             默认主题\nLuCI  ---> 4. Themes  ---> luci-theme-openwrt                          openwrt主题\nLuCI  ---> 5. Translations  --->  luci-i18n-chinese                            支持中文\n大家可以自行增减插件，保存设置后，重新编译下即可。\n \n文件系统、SD卡、USB配置：\nBase system  --->  block-mount                                              USB挂载\nKernel modules  --->  Filesystems  --->  kmod-fs-ext4              支持ext4文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-nfs                支持NFS文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-nfs-common\nKernel modules  --->  Filesystems  --->  kmod-fs-ntfs              支持NTFS文件系统\nKernel modules  --->  Filesystems  --->  kmod-fs-vfat             支持FAT32文件系统\nKernel modules  --->  Native Language Support  --->  kmod-nls-cp437       支持中文\nKernel modules  --->  Native Language Support  --->  kmod-nls-iso8859-1   支持中文\nKernel modules  --->  Native Language Support  --->  kmod-nls-utf8         支持中文\nKernel modules  --->  Other modules  --->  kmod-mmc                     支持SD卡\nKernel modules  --->  Other modules  --->  kmod-sdhci                     支持SD卡\nKernel modules  --->  Other modules  --->  kmod-sdhci-mt7620            支持SD卡\nKernel modules  --->  USB Support  --->  kmod-usb-ohci                 支持USB 1.0\nKernel modules  --->  USB Support  --->  kmod-usb-storage\nKernel modules  --->  USB Support  --->  kmod-usb-storage-extras\nKernel modules  --->  USB Support  --->  kmod-usb-uhci                 支持USB 1.1\nKernel modules  --->  USB Support  --->  kmod-usb2                     支持USB 2.0\n \n网络配置：\nNetwork  --->  ppp-mod-pppoe                                           PPPOE拨号模式\nNetwork  --->  ppp-mod-pptp                                                 VPN客户端\nNetwork  --->  SSH  --->  openssh-client                                    SSH客户端\n其实里面有很多软件，大家可以编译试一试的，番茄软件很多的哦！~\n \n应用程序配置：\nUtilities  --->  bzip2                                                            解压缩工具\nUtilities  --->  Compression  --->  unrar                                       解压缩工具\nUtilities  --->  Compression  --->  unzip                                       解压缩工具\nUtilities  --->  Compression  --->  zip                                           压缩工具\nUtilities  --->  Filesystem  --->  badblocks                             支持ext2文件系统\nUtilities  --->  Filesystem  --->  e2fsprogs                 支持ext2/ext3/ext4格式化工具\nUtilities  --->  disc  --->  fdisk                                                   分区工具\n```\n\n除了上边的配置，以下我标注几个对自己需求比较重要的，其他的省略\n\n第一个Target System ，这里边就是要选你的路由器所对应的cpu的型号。如果路由器有两颗芯片，以第一个cpu为主，C301路由器主芯片为AR9344，所以我选择Atheros AR7XXX / AR9XXX,这个可能要靠一些经验了，我对硬件的芯片区分的也不是很好，最好去相应的论坛找找路由器对应的芯片类型。\n\n第二个Subtarget，选择Generic即可。这一步我不是特别明白，这一选项跟你上边的targetsystem有关，如果换一个芯片的话，这里可能还要选择对应的版本，目前尚不清晰。\n    \n第三个target profile 选择路由器型号。一般比较通用。\n    \n> （我down了一份BB版的源码，在这里找qihooC301没有找到，所以就是不支持，后来算下日子才知道，恩山的HACK大哥9月份才提交的patch，正式被官方录用。bb是7月出来的，肯定没有了！这里啰嗦几句，什么Kamikaze ，backfire ，attitude adjustment， barrier breaker 和trunk都是什么意思，之前我也模糊，后来去官方wiki，https://dev.openwrt.org/wiki/GetSource，感觉标注跟linux一贯的风格差不多，ubuntu两年一个正式版，openwrt最近也是两年，但时间并不确定，所以这样来看我也就清楚了。前面的这几个都是openwrt的正式版本，从老版本到最新版本，都是稳定版。后边的这个trunk是开发版，也就是功能涵盖barrier breaker，但是还在慢慢的添加新功能。所以如果你不是特意的获取trunk的老版，你获取到的永远是最新的，trunk官方源码一两天就更新一次,更新速度特别快，可以用svn log 网址来看下）\n\n这几个大选项 global build settings ,advaced configureation options , build the openwrt image builder ,build the openwrt sdk ,package the openwrt-based toolchain ,image configuration 目前我还没用到，所以不清楚具体含义和用法。\n\n  在大项Base system下，基本上没有动，还是按照op默认的配置来做的，值得要说的是，这里边的busybox，大家都知道busybox是一个嵌入式的linux shell集成工具，嵌入式的linux基本上所有的命令都是出自这里边（我所说的当然不包括一些第三方的package软件包的命令了）。如果有需求，可以进去打开一些命令，比如lsusb就可以在这里边打开，不然默认是没有的，除非你在其它的package安装usbutils（在大项utils下）。\n\n    Administrator默认。\n\n    Boot Loaders 默认。\n\n    Devlopment 默认。\n\n    Firmware 默认。\n    \n大项Kernel modules，这里边的选项，个人感觉是最重要的一个了，有很多功能如果这里边不选择好，那么将会非常麻烦，以后的固件可能很多功能用不了。结合我自己的C301进行定制。对于需要的功能。首先是无线，C301是双频的wifi，有2.4G和5G，分为两个网卡。所以在这里边的Wireless Drivers把Kmod-ath10k和kmod-ath9k，kmod-ath9k-common都要选上！因为C301自带一个usb口，所以我们进入usb support,把kmod-usb-core kmod-usb-ohci kmod-usb-storage-extras kmod-usb-uhci kmod-usb2都选上。在network support 下，把ppp的选项都选上，不然 无法拨号上网。由于360这个路由器还有一个LED，所以还要选下LED modules，我选的是gpio defaulton ledtrig gpio timer usbdev，这几项选上，我这边led显示是正常的，不过跟官方的那种亮不一样，我这个是一闪一闪的，不过感觉还可以！！！！内核在结合上边的就差不多了。\n\n还有比较重要的两个，这两个是个性化 定制的东西，一般的package小软件，都在这两个下面。功能非常丰富而且强大！\n按照我目前的需求来的，我用到了network下的File transfer下的lftp，这是一个ftp的客户端，我这需求类似的可能比较小。还有SSH这里边我全选了。VPN也可以选。。。至于utilities里边，我用到了usbutils和usb-modeswitch（挂3G网卡）\n\n至此。配置结束了。\n\n> 接下来还有很重要的一步才可以编译。这也算是openwrt官方Trunk的一个BUG（至少在现在14年10月份没有解决呢），估计以后会修复的。\n就是如果配置结果make，然后编译好的固件，你刷上去是没有无线的（2.4G和5G都没办法启动），所以需要替换掉一个目前源码工程目录下的mac80211下的东西。具体做法：\n在现在用的trunk源码目录外新建一个文件夹testop，然后进入testop，down一份之前的代码。svn co -r42681 svn://svn.openwrt.org/openwrt/trunk，之所以用这个版本，是因为这个版本的的2.4G是正常的，（也就是说5G不正常，所以不能用，但现在wifi大多数还是2.4G的！），down下来之后，然后把test源码目录下的pakcage/kernel/mac80211/Makefile和pakcage/kernel/mac80211/patches替换到之前的trunk源码的package/kernel/mac80211下。\n\n这时配置才算真正结束。\n\nmake V=99 或者 make j=cpu核数+1 都可以，就执行编译了。\n编译完之后会在源码目录下的bin下生诚ar7XXX的文件夹，打开之后就会看到我们的固件和packages包，这个包是好东西，因为和你的路由器是配套的，里边的软件你路由器可以直接安装。并不是所有ipk结尾的文件都能在路由器上安装，也并不是同一个cpu平台的通用，也可以说同型号的路由器ipk都可能不通用。所以这个文件夹的packages还是很有用的，保存好，之后做一个局域网软件源，从路由器直接到这里下载软件就可以了。。\n\n## OpenWRT挂3G网卡（华为E3276）\n\n首先要说的是，华为的大部分3G网卡都支持linux，也就是说openwrt只要是配置好，是完全能够支持的（当然你需要有一个usb口）.\n\n我们需要几个东西，PPP、usb-serial、usb-modeswitch,与此同时，usb的一些选项也要加进去，例如USB2.0、usb1.0、usb-storage等。\n我们所需要的是在/dev/目录下看到ttyUSB0和ttyUSB1，虽然linux驱动能够识别3G网卡，但是如果想让其工作，还需要使之拨号，这就需要ttyUSB0这个接口了，我们可以把她想象成以太网口，例如eth1。原来广域网口wan出去是从eth1走的，现在wan出去是通过ttyUSB0。另一方面，据说在BB版本（openwrt 14.07）没有出现之前，我们即便装了usb-serial也不能看到/dev/下有ttyUSB,还需要设置才可以（老版本的设置请参照下边的某老外论坛上的参考文献，另外为了识别你网卡产品的Device ID,你在openwrt下需要一个命令，lsusb，这个命令你在编译openwrt的时候可以在busybox里选上，也可以勾选上在Utilities/下的USButils）。话说回来，现在的BB版和trunk版就方便多了，直接在内核中选上usb-serial就可以看到/dev/ttyUSB0和/dev/ttyUSB1了。\n\n这几个东西具体的位置，usb-serial在内核目录下的USB support下，值得一提的是，你需要把Kmod-usb-serial-option和kmod-usb-serial-wwan、还有mod-us-serial-ipw选上。ppp在network模块下，一般这个都会编的。。。usb-modeswitch在Utilities下。USB的一些常用选项都在内核目录下的USB SUPPORT下。\n\n\n配置好了。然后就可以编译进固件中了。\n\n至于启动3G拨号。有两种方式，一个是shell中的操作，一个是web页面的操作。我用的是web上的操作，在网络，接口，找到wan，点击修改。\n然后在协议中找到UMTS/GPRS/EV-DO这一项。点击切换协议，然后在调制解调器节点 选择/dev/ttyUSB0,服务类型选择UMTS/GPRS (即3G/2G网)其他的留空就可以直接点保存应用了。过一会就看到ISP给分配的ipv4地址了。ping下外网是可以通的。\n\n切换到原来的上网模式，选择原来的模式即可，我这边的环境是dhcp自动分配的，我就选择dhcp自动获取ip。然后点击保存会提示物理的端口需要选择，点击物理设置，桥接接口 不选，直接选中接口中的eth1即可，因为eth1对应于路由器上的wan口。\n\n\n至此3G配置结束！\n副：路由器如果只有一个USB口，请慎用USB-HUB，经本人实际测试，插USB-HUB确实可以使用，3G网卡，U盘，都可以用，这几天一直有个ssh的连接在用，我发现ssh总是无故断掉，找了好半天原因找不到。ps发现pppd这个进程总是断掉重启，所以我用ping 外网ip的方式发现，一分钟到两分钟就会使3G网断掉，于是我怀疑是接了USB-HUB的原因，我果断把USB-HUB撤掉，直接插在路由器的USB接口上，在测试ping外网，发现ping完全正常，目前已经ping了4000秒左右了，没有出现网络断开。所以可以确定是USB-HUB导致3G网卡供电不足。慎用！！！如果确有需求，推荐X宝买一款带供电的hub。\n\n\n## 四.对编译的问题和总结\n\n#### 4.1    在编译的过程中难免会出现一个问题，比如说，我们down的这份源码中，make menuconfig没有这个某个软件怎么办？很多人都是通过刷好固件opkg install xx解决，但是经实验证实，很难下载成功，或者下载成功安装不上，具体原因还我并不清楚。。所以我在想有些软件，我这个trunk版本没有，以前的trunk版本有没有？整个trunk版本都没有，那么BB正式版有没有？\n解：假如我们down一份之前的代码或者正式版代码，在源码工程目录下，linux下可以用find . -name xxx来找你想要的软件包（当然名字要首先明确下来），这时候如果找到的话，一般来说这个文件夹都是一个索引文件（目前个人的感觉，对源码目录及结构细节和Makefile的组织并没有深究过），里边会有Makefile和子文件夹file，file中又有几个文件。把这个软件的文件夹（一般路径不确定，比如feeds/packages/net/autossh）拷贝到我们自己的源码目录下的package下（这个路径是明确规定的，不能是其他的），所以按照这种思路，以后就不是去满世界找ipk了，自己编译一个更加方便，而且肯定兼容！\n\n然后有两个方式来完成你想要的功能，主要看你的需求，第一个是直接编译出ipk文件，另外一个是编译出新的包含此软件功能的固件。\n```\n第一个方式用几个指令即可：\n说先解释下 即为你拷贝来的软件包。\nmake package//prepare V=99 \n//这个命令是根据软件中的Makefile中的路径去指定URL下载软件包源码，并放在dl目录下，具体解压到哪里还没有研究- -！\n//敲完这个命令会有个警告，告诉你重新make menuconfig一下。因为这时候menuconfig就可以看到新的功能了哦\n//一般新的功能都在图形配置界面的network下或者utilities下，仔细找找可以看到。\nmake package//compile V=99   \n//这个是编译命令，编译完之后就可以在bin目录的相应位置找到，但是我发现目录下会多出好多个ipk\n//可能其中还有关联关系，就是可能生成很多个ipk，可能光安装一个不能安装上。。安装的过程没测试过。\n\n\n```\n\n\n```\n//另外提供一些命令，这些命令没有完全用过。（摘自官方wiki）\nTroubleshooting\n\nIf you find your package doesn’t show up in menuconfig, try the following command to see if you get the correct description:\n    TOPDIR=$PWD make -C package/ DUMP=1 V=99\nIf you’re just having trouble getting your package to compile, there’s a few shortcuts you can take. Instead of waiting for make to get to your package, you can run one of the following:\n\nmake package//clean V=99\nmake package//install V=99\nAnother nice trick is that if the source directory under build_dir/ is newer than the package directory, it won’t clobber it by unpacking the sources again. If you were working on a patch you could simply edit the sources under the build_dir// directory and run the install command above, when satisfied, copy the patched sources elsewhere and diff them with the unpatched sources. A warning though - if you go modify anything under package/ it will remove the old sources and unpack a fresh copy.\nOther useful targets include:\n\nmake package//prepare V=99\nmake package//compile V=99\nmake package//configure V=99\n```\n用以上这些命令的前提是，你已经搭建好了一个完整的编译环境（就是说你make过固件，不然没有交叉编译工具，你编译不了软件）\n\n第二种方式是，你用完\n```\nmake package//prepare V=99\n```\n\n命令后menuconfig中已经可以看到你所需要的软件了，直接make V=99 编译新固件！\n\n\n#### 4.2 对于定制文件系统\n\n\n在源码目录下的package/base-files/files下就是openwrt的文件系统。这里只有简单的几个，其他的一些目录都是在编译的时候生成的。\n本人实际测试，发现可以在这个目录下任意位置添加自己的配置文件或者脚本，编译固件的过程中，编译器会把这个目录全部拷贝走的。\n如果需要开机启动脚本，在etc/rc.local中添加，但要记得如果调用你的脚本是一个while无限循环的，那么需要在脚本名的后边加后台运行，即&\n不然会导致exit 0无法执行，到时候reboot这些命令不可用。\nopenwrt大部分基础文件都在软件包base-files里面。这个软件包做3件事：\n\n1 复制package/base-files/files下的所有文件到根目录\n\n2 复制target/linux/对应平台/base-files下的所有文件到根目录\n\n3 复制源码根目录下的files文件夹下的所有文件到根目录（如果需要添加自己的文件那么可以通过这一步，即在源码根目录内新建一个files文件夹）\n#### 4.3.解决目前trunk版无法正常使用校园web认证\n\n这个问题困扰了很久，这几天有时间所以就找了下问题。问题找了好多，编译了很多次，最后把问题定位到了mwan上。\n\n所在的环境为校园网，上网会跳转web认证页面，然后30秒之后认证页面就弹不出来了，打开任何网页无果。ping上层网关通，ping同级ip通，把网线拔了重新插在wan口上，又会有几十秒的时间跳转，过了这个时间就又不正常了。由于在校园，所在环境为自然的双栈地址，装了一个6relayd，按理说v4地址和v6地址都能获取到，v4不正常，v6应该正常，可是ipv6同样不正常。\n\n经测试发现，插上wan口上，然后这时候随便刷新网页会有弹出认证页面，然后过一会就认证不了了。这时候再查看路由器web页面的系统日志信息\n，发现确实有异常，于是尝试几次相同的操作，发现可以锁定问题。\n```\nSun Nov  2 04:44:07 2014 user.notice mwan3: ifup interface wan (eth1)\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: reading /tmp/resolv.conf.auto\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using local addresses only for domain lan\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using nameserver 210.45.240.99#53\nSun Nov  2 04:44:08 2014 daemon.info dnsmasq[1552]: using nameserver 8.8.8.8#53\nSun Nov  2 04:44:08 2014 user.notice firewall: Reloading firewall due to ifup of wan (eth1)\nSun Nov  2 04:44:10 2014 daemon.notice netifd: Interface 'wan6' is now up\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for br-lan detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for lo detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for eth1 detected\nSun Nov  2 04:44:10 2014 daemon.info hnetd[2022]: platform: interface update for eth1 detected\nSun Nov  2 04:44:11 2014 user.notice root: starting ntpclient\nSun Nov  2 04:44:11 2014 user.crit ddns-scripts[2421]: myddns_ipv4: CRITICAL ERROR - Service Configuration is disabled - EXITING\nSun Nov  2 04:44:11 2014 daemon.warn 6relayd[1567]: A default route is present but there is no public prefix on br-lan thus we don't announce a default route!\nSun Nov  2 04:44:11 2014 daemon.warn odhcpd[1379]: A default route is present but there is no public prefix on br-lan thus we don't announce a default route!\nSun Nov  2 04:44:12 2014 daemon.err miniupnpd[2508]: could not open lease file: /var/upnp.leases\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: HTTP listening on port 5000\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: HTTP IPv6 address given to control points : [fdc0:8c3b:8d0::1]\nSun Nov  2 04:44:12 2014 daemon.notice miniupnpd[2508]: Listening for NAT-PMP/PCP traffic on port 5351\nSun Nov  2 04:44:13 2014 user.notice firewall: Reloading firewall due to ifup of wan6 (eth1)\nSun Nov  2 04:44:13 2014 user.crit ddns-scripts[2593]: myddns_ipv6: CRITICAL ERROR - Service Configuration is disabled - EXITING\nSun Nov  2 04:44:13 2014 daemon.warn 6relayd[1567]: Termination requested by signal.\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /etc/hosts - 1 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/odhcpd - 1 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/6relayd - 0 addresses\nSun Nov  2 04:44:14 2014 daemon.info dnsmasq[1552]: read /tmp/hosts/dhcp - 1 addresses\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: starting ssh (count 11)\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: ssh child pid is 2685\nSun Nov  2 04:44:28 2014 user.info autossh[1475]: ssh exited with error status 255; restarting ssh\nSun Nov  2 04:44:42 2014 user.notice mwan3track: Interface wan (eth1) is offline\nSun Nov  2 04:44:42 2014 user.notice mwan3: ifdown interface wan (eth1)\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: starting ssh (count 12)\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: ssh child pid is 2795\nSun Nov  2 04:44:42 2014 user.info autossh[1475]: ssh exited with error status 255; restarting ssh\nSun Nov  2 04:44:49 2014 user.notice root: stopping ntpclient\n```\n观察可发现，插上网线会有mwan打开接口eth1，然后这时候可以通过认证，然后过一会没认证了，这时发现正好会出现mwan4track和mwan3 把eth1关掉了。（实际上，我在路由器shell中查看并没有关掉eth1）\n\nmwan3是一个多拨的软件，我个人认为这个软件可能会尝试几次多播，不成功就停止运行，可能与我们校园的web认证冲突。\n目前down下来的openwrt源码，默认的menuconfig中已经把mwan加到编译选项上。所以才会出现这种情况！\n问题找到了，解决问题办法是删掉mwan3和mwan3track。ps观察在/usr/sbin/下，删除，重启，于是问题解决。\n最终解决办法在编译openwrt的时候把mwan取消即可。\n```\nNetwork-->Routing and Redirection--->mwan3\nLuCI-->Application-->luci-app-multiwam\nLuCI-->Application-->luci-app-mwan3\n```\n\n#### 4.4 Openwrt安装pptp客户端\n\n需要两个包，一般的固件中，可能都集成了。\n一个是ppp-mod-pptp，另一个是luci-proto-pptp。\n\n具体的配置可以在luci界面上配置，接口-网络-添加新接口，然后选择协议为pptp即可。\n输入user,password,server即可。\n\n另外比较重要的一部是在/etc/ppp/options和/etc/ppp/options.pptp文件中。以下为自己的配置文件。\n```\nroot@OpenWrt:/etc/ppp# cat options\n#debug\nlogfile /dev/null\n#noipdefault\n#noaccomp\n#nopcomp\n#nocrtscts\n#lock\n#maxfail 0\n#lcp-echo-failure 5\n#lcp-echo-interval 1\n\n```\n\n\n```\nroot@OpenWrt:/etc/ppp# cat options.pptp\nnoipdefault\nnoauth\nnobsdcomp\nnodeflate\nidle 0\nmppe required,no40,no56,stateless\nmaxfail 0\nrefuse-eap\nrefuse-pap\n\n```\n\n#### 4.5 HP 1020 plus打印机--->网络共享打印机\n\n> 所需模块：kmod-usb-printer、p910nd、luci-app-p910nd\n\n> 打印的原理即：\npc把要打印的文档通过打印机驱动封装后成为打印机可识别的数据，发送给路由器端，路由器端由p910nd监听程序进行转发，把接到的数据转发给打印机。所以路由器端是不需要驱动程序的，只要保证p910nd进程能够正常运行即可。\n\n**具体配置（a,b,c,d）：**\n\na.由于惠普的低端打印机（类似于LaserJet 1010 1008 1009 1020 等）本身并不是自带firmware，我们每次打印的时候都是由PC端的驱动程序发送给打印机一个firmware。这个firmware在打印机的内存中，掉电后firmware就没了。基于打印机断电后不能够正常使用的问题，就是因为没有firmware的原因。firmware常用下载地址http://oleg.wl500g.info/hplj/ 找到自己的下载即可。也可以自己去编译，然后把编译出来的固件扔到路由器的/lib目录下。编译的过程参考http://wiki.openwrt.org/doc/howto/p910nd.server?s[]=p910nd\n\n所以我们可以通过一个热插拔的脚本来做，每次usb接到路由器时，就把firmware这个固件推送到打印机上（所以每次插路由器的时候会听到打印机呗驱动的声音）。然后再进行打印即可。usb的热插拔采用hotplug模块，这个一般op中都是自带的了。\n配置文件的位置在/etc/hotplug.d/usb/下。名字叫做20-usb_mode。可参考我的配置文件。\n```\n#!/bin/sh\nset -e\n\n# change this to the location where you put the .dl file:\nFIRMWARE=\"/lib/sihp1020.dl\"\nDEVICE=/dev/usb/lp0\nLOGFILE=/var/log/hp\n\nif [ \"$PRODUCT\" = \"3f0/2b17/100\" -a \"$ACTION\" = \"add\" ]; then\nfor i in $(seq 30); do\nif [ -c $DEVICE ]; then\necho \"$(date) : Sending firmware to printer…\" > $LOGFILE\nnc 192.168.14.55 9109 < /lib/sihp1020.dl\necho \"$(date) : done.\" ? $LOGFILE\nexit\nfi\nsleep 1\ndone\nfi\n```\nb.做完以上的步骤之后，并在/etc/rc.local下编辑如下内容，使p910nd进程自启。\n```\n/etc/init.d/p910nd start &\n\nexit 0\n```\n\nc.另外在luci管理界面上，把p910nd的配置中，接口选择wan口。启用前勾上。bidirectional mode(双向模式)不要打钩。\n\n也可参考配置文件。/etc/config/p910nd\n\n\n```\nconfig p910nd\n        option device '/dev/usb/lp0'\n        option enabled '1'\n        option bind '192.168.14.55'\n        option port '9'\n```\nd.在PC端，首先需要安装系统的驱动程序。\n有两种方式，第一种是从百度上直接搜索驱动，然后插上打印机的usb到电脑上，安装驱动。\n另一种方式不用插usb，直接在控制面板中，添加打印机，网络打印机，然后选择ip和端口名，然后windows update找到打印机响应型号\n安装即可。\n\n第一种安装完之后拔掉usb后，双击1020打印机，然后在左上角的打印下，把脱机打印取消。然后右击1020打印机，选择端口，添加端口，\n把ip和端口号写好，其他的默认，确认。还有重要的一步是，把双向打印前的勾一定要取消掉，不然会出现重复打印的情况。\n\n第二种安装完之后即可使用。注意 双向打印去掉。。\n\n***稳定性*：**\n还算可靠，在打印的时候，如果不能保证纸张充足的情况下打印，最后剩下的没有纸张了就不能够打印了，你在pc上再选择打印也不可以。\n这时候需要把打印机usb从路由器上拔掉，等待3秒后重新插上，然后打印机就会把剩余的任务打印出来。\n\n\n## 五 参考文献：\n\nhttp://blog.csdn.net/qingfengtsing/article/details/39344327\nhttp://blog.csdn.net/jk110333/article/category/1148871\nhttp://openwrt.diandian.com/post/2014-09-16/40062999348\nhttps://downloads.openwrt.org/kamikaze/docs/openwrt.html\nhttps://dev.openwrt.org/wiki/GetSource\nhttp://chaochaoblog.com/archives/1011\nhttp://www.right.com.cn/forum/thread-146084-1-1.html\nhttp://wenku.it168.com/d_000649332.shtml\nhttp://www.right.com.cn/forum/thread-147651-1-1.html\nhttp://www.right.com.cn/forum/thread-148069-1-1.html\nhttp://www.right.com.cn/forum/home.php?mod=space&uid=200302&do=thread&type=thread&view=me&from=space\nhttp://wenku.baidu.com/view/85d69c56ee06eff9aef80777.html\nhttps://forum.openwrt.org/viewtopic.php?id=50795\nhttps://github.com/pichuang/openvwrt","slug":"openwrt","published":1,"updated":"2015-08-09T07:28:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez02h000jo3d35orphhcj"},{"title":"linux中的内存管理","date":"2015-08-01T18:01:01.000Z","description":null,"_content":"\n前一段时间看了《深入理解Linux内核》对其中的内存管理部分花了不少时间，但是还是有很多问题不是很清楚，最近又花了一些时间复习了一下，在这里记录下自己的理解和对Linux中内存管理的一些看法和认识。\n<!--more-->\n我比较喜欢搞清楚一个技术本身的发展历程，简而言之就是这个技术是怎么发展而来的，在这个技术之前存在哪些技术，这些技术有哪些特点，为什么会被目前的技术所取代，而目前的技术又解决了之前的技术所存在的哪些问题。弄清楚了这些，我们才能比较清晰的把握某一项技术。有些资料在介绍某个概念的时候直接就介绍这个概念的意义，原理，而对其发展过程和背后的原理丝毫不提，仿佛这个技术从天上掉下来的一样。介于此，还是以内存管理的发展历程来讲述今天的主题。\n首先，我必须要阐述一下这篇文章的主题是Linux内存管理中的分段和分页技术。\n让我们来回顾一下历史，在早期的计算机中，程序是直接运行在物理内存上的。换句话说，就是程序在运行的过程中访问的都是物理地址。如果这个系统只运行一个程序，那么只要这个程序所需的内存不要超过该机器的物理内存就不会出现问题，我们也就不需要考虑内存管理这个麻烦事了，反正就你一个程序，就这么点内存，吃不吃得饱那是你的事情了。然而现在的系统都是支持多任务，多进程的，这样CPU以及其他硬件的利用率会更高，这个时候我们就要考虑到将系统内有限的物理内存如何及时有效的分配给多个程序了，这个事情本身我们就称之为内存管理。\n下面举一个早期的计算机系统中，内存分配管理的例子，以便于大家理解。\n加入我们有三个程序，程序1，2，3.程序1运行的过程中需要10M内存，程序2运行的过程中需要100M内存，而程序3运行的过程中需要20M内存。如果系统同时需要运行程序A和B，那么早期的内存管理过程大概是这样的，将物理内存的前10M分配给A, 接下来的10M-110M分配给B。这种内存管理的方法比较直接，好了，假设我们这个时候想让程序C也运行，同时假设我们系统的内存只有128M，显然按照这种方法程序C由于内存不够是不能够运行的。大家知道可以使用虚拟内存的技术，内存空间不够的时候可以将程序不需要用到的数据交换到磁盘空间上去，已达到扩展内存空间的目的。下面我们来看看这种内存管理方式存在的几个比较明显的问题。就像文章一开始提到的，要很深层次的把握某个技术最好搞清楚其发展历程。\n### 进程地址空间不能隔离\n\n由于程序直接访问的是物理内存，这个时候程序所使用的内存空间不是隔离的。举个例子，就像上面说的A的地址空间是0-10M这个范围内，但是如果A中有一段代码是操作10M-128M这段地址空间内的数据，那么程序B和程序C就很可能会崩溃（每个程序都可以系统的整个地址空间）。这样很多恶意程序或者是木马程序可以轻而易举的破快其他的程序，系统的安全性也就得不到保障了，这对用户来说也是不能容忍的。\n### 内存使用的效率低\n\n如上面提到的，如果我们要像让程序A、B、C同时运行，那么唯一的方法就是使用虚拟内存技术将一些程序暂时不用的数据写到磁盘上，在需要的时候再从磁盘读回内存。这里程序C要运行，将A交换到磁盘上去显然是不行的，因为程序是需要连续的地址空间的，程序C需要20M的内存，而A只有10M的空间，所以需要将程序B交换到磁盘上去，而B足足有100M，可以看到为了运行程序C我们需要将100M的数据从内存写到磁盘，然后在程序B需要运行的时候再从磁盘读到内存，我们知道IO操作比较耗时，所以这个过程效率将会十分低下。\n### 程序运行的地址不能确定\n\n程序每次需要运行时，都需要在内存中非配一块足够大的空闲区域，而问题是这个空闲的位置是不能确定的，这会带来一些重定位的问题，重定位的问题确定就是程序中引用的变量和函数的地址，如果有不明白童鞋可以去查查编译原理方面的资料。\n内存管理无非就是想办法解决上面三个问题，如何使进程的地址空间隔离，如何提高内存的使用效率，如何解决程序运行时的重定位问题？\n这里引用计算机界一句无从考证的名言：“计算机系统里的任何问题都可以靠引入一个中间层来解决。”\n现在的内存管理方法就是在程序和物理内存之间引入了虚拟内存这个概念。虚拟内存位于程序和物理内存之间，程序只能看见虚拟内存，再也不能直接访问物理内存。每个程序都有自己独立的进程地址空间，这样就做到了进程隔离。这里的进程地址空间是指虚拟地址。顾名思义既然是虚拟地址，也就是虚的，不是现实存在的地址空间。\n既然我们在程序和物理地址空间之间增加了虚拟地址，那么就要解决怎么从虚拟地址映射到物理地址，因为程序最终肯定是运行在物理内存中的，主要有分段和分页两种技术。\n分段(Segmentation)：这种方法是人们最开始使用的一种方法，基本思路是将程序所需要的内存地址空间大小的虚拟空间映射到某个\n物理地址空间。\n\n![image description](http://blog.chinaunix.net/attachment/201306/11/26611383_1370963405d40G.jpg)\n每个程序都有其独立的虚拟的独立的进程地址空间，可以看到程序A和B的虚拟地址空间都是从0x00000000开始的。我们将两块大小相同的虚拟地址空间和实际物理地址空间一一映射，即虚拟地址空间中的每个字节对应于实际地址空间中的每个字节，这个映射过程由软件来设置映射的机制，实际的转换由硬件来完成。\n这种分段的机制解决了文章一开始提到的3个问题中的进程地址空间隔离和程序地址重定位的问题。程序A和程序B有自己独立的虚拟地址空间，而且该虚拟地址空间被映射到了互相不重叠的物理地址空间，如果程序A访问虚拟地址空间的地址不在0x00000000-0x00A00000这个范围内，那么内核就会拒绝这个请求，所以它解决了隔离地址空间的问题。我们应用程序A只需要关心其虚拟地址空间0x00000000-0x00A00000，而其被映射到哪个物理地址我们无需关心，所以程序永远按照这个虚拟地址空间来放置变量，代码，不需要重新定位。\n无论如何分段机制解决了上面两个问题，是一个很大的进步，但是对于内存效率问题仍然无能为力。因为这种内存映射机制仍然是以程序为单位，当内存不足时仍然需要将整个程序交换到磁盘，这样内存使用的效率仍然很低。那么，怎么才算高效率的内存使用呢。事实上，根据程序的局部性运行原理，一个程序在运行的过程当中，在某个时间段内，只有一小部分数据会被经常用到。所以我们需要更加小粒度的内存分割和映射方法，此时是否会想到Linux中的Buddy算法和slab内存分配机制呢，哈哈。另一种将虚拟地址转换为物理地址的方法分页机制应运而生了。\n分页机制：\n分页机制就是把内存地址空间分为若干个很小的固定大小的页，每一页的大小由内存决定，就像Linux中ext文件系统将磁盘分成若干个Block一样，这样做是分别是为了提高内存和磁盘的利用率。试想以下，如果将磁盘空间分成N等份，每一份的大小(一个Block)是1M，如果我想存储在磁盘上的文件是1K字节，那么其余的999K字节是不是浪费了。所以需要更加细粒度的磁盘分割方式，我们可以将Block设置得小一点，这当然是根据所存放文件的大小来综合考虑的，好像有点跑题了，我只是想说，内存中的分页机制跟ext文件系统中的磁盘分割机制非常相似。\nLinux中一般页的大小是4KB，我们把进程的地址空间按页分割，把常用的数据和代码页装载到内存中，不常用的代码和数据保存在磁盘中，我们还是以一个例子来说明,如下图：\n\n![进程虚拟地址空间、物理地址空间和磁盘之间的页映射关系](http://blog.chinaunix.net/attachment/201306/11/26611383_1370963405d40G.jpg)\n\n我们可以看到进程1和进程2的虚拟地址空间都被映射到了不连续的物理地址空间内(这个意义很大，如果有一天我们的连续物理地址空间不够，但是不连续的地址空间很多，如果没有这种技术，我们的程序就没有办法运行),甚至他们共用了一部分物理地址空间，这就是共享内存。\n进程1的虚拟页VP2和VP3被交换到了磁盘中，在程序需要这两页的时候，Linux内核会产生一个缺页异常，然后异常管理程序会将其读到内存中。\n这就是分页机制的原理，当然Linux中的分页机制的实现还是比较复杂的，通过了也全局目录，也上级目录，页中级目录，页表等几级的分页机制来实现的，但是基本的工作原理是不会变的。\n分页机制的实现需要硬件的实现，这个硬件名字叫做MMU(Memory Management Unit)，他就是专门负责从虚拟地址到物理地址转换的，也就是从虚拟页找到物理页。\n\n\n参考文献：\n《深入理解Linux内核》\n《程序员的自我修养》","source":"_posts/linuxneicunguanli.md","raw":"title: linux中的内存管理 \ndate: 2015-8-1 14:01:01\ncategories: 转载文章 \ntags: [linux,内存管理,分页技术] \ndescription: \n---\n\n前一段时间看了《深入理解Linux内核》对其中的内存管理部分花了不少时间，但是还是有很多问题不是很清楚，最近又花了一些时间复习了一下，在这里记录下自己的理解和对Linux中内存管理的一些看法和认识。\n<!--more-->\n我比较喜欢搞清楚一个技术本身的发展历程，简而言之就是这个技术是怎么发展而来的，在这个技术之前存在哪些技术，这些技术有哪些特点，为什么会被目前的技术所取代，而目前的技术又解决了之前的技术所存在的哪些问题。弄清楚了这些，我们才能比较清晰的把握某一项技术。有些资料在介绍某个概念的时候直接就介绍这个概念的意义，原理，而对其发展过程和背后的原理丝毫不提，仿佛这个技术从天上掉下来的一样。介于此，还是以内存管理的发展历程来讲述今天的主题。\n首先，我必须要阐述一下这篇文章的主题是Linux内存管理中的分段和分页技术。\n让我们来回顾一下历史，在早期的计算机中，程序是直接运行在物理内存上的。换句话说，就是程序在运行的过程中访问的都是物理地址。如果这个系统只运行一个程序，那么只要这个程序所需的内存不要超过该机器的物理内存就不会出现问题，我们也就不需要考虑内存管理这个麻烦事了，反正就你一个程序，就这么点内存，吃不吃得饱那是你的事情了。然而现在的系统都是支持多任务，多进程的，这样CPU以及其他硬件的利用率会更高，这个时候我们就要考虑到将系统内有限的物理内存如何及时有效的分配给多个程序了，这个事情本身我们就称之为内存管理。\n下面举一个早期的计算机系统中，内存分配管理的例子，以便于大家理解。\n加入我们有三个程序，程序1，2，3.程序1运行的过程中需要10M内存，程序2运行的过程中需要100M内存，而程序3运行的过程中需要20M内存。如果系统同时需要运行程序A和B，那么早期的内存管理过程大概是这样的，将物理内存的前10M分配给A, 接下来的10M-110M分配给B。这种内存管理的方法比较直接，好了，假设我们这个时候想让程序C也运行，同时假设我们系统的内存只有128M，显然按照这种方法程序C由于内存不够是不能够运行的。大家知道可以使用虚拟内存的技术，内存空间不够的时候可以将程序不需要用到的数据交换到磁盘空间上去，已达到扩展内存空间的目的。下面我们来看看这种内存管理方式存在的几个比较明显的问题。就像文章一开始提到的，要很深层次的把握某个技术最好搞清楚其发展历程。\n### 进程地址空间不能隔离\n\n由于程序直接访问的是物理内存，这个时候程序所使用的内存空间不是隔离的。举个例子，就像上面说的A的地址空间是0-10M这个范围内，但是如果A中有一段代码是操作10M-128M这段地址空间内的数据，那么程序B和程序C就很可能会崩溃（每个程序都可以系统的整个地址空间）。这样很多恶意程序或者是木马程序可以轻而易举的破快其他的程序，系统的安全性也就得不到保障了，这对用户来说也是不能容忍的。\n### 内存使用的效率低\n\n如上面提到的，如果我们要像让程序A、B、C同时运行，那么唯一的方法就是使用虚拟内存技术将一些程序暂时不用的数据写到磁盘上，在需要的时候再从磁盘读回内存。这里程序C要运行，将A交换到磁盘上去显然是不行的，因为程序是需要连续的地址空间的，程序C需要20M的内存，而A只有10M的空间，所以需要将程序B交换到磁盘上去，而B足足有100M，可以看到为了运行程序C我们需要将100M的数据从内存写到磁盘，然后在程序B需要运行的时候再从磁盘读到内存，我们知道IO操作比较耗时，所以这个过程效率将会十分低下。\n### 程序运行的地址不能确定\n\n程序每次需要运行时，都需要在内存中非配一块足够大的空闲区域，而问题是这个空闲的位置是不能确定的，这会带来一些重定位的问题，重定位的问题确定就是程序中引用的变量和函数的地址，如果有不明白童鞋可以去查查编译原理方面的资料。\n内存管理无非就是想办法解决上面三个问题，如何使进程的地址空间隔离，如何提高内存的使用效率，如何解决程序运行时的重定位问题？\n这里引用计算机界一句无从考证的名言：“计算机系统里的任何问题都可以靠引入一个中间层来解决。”\n现在的内存管理方法就是在程序和物理内存之间引入了虚拟内存这个概念。虚拟内存位于程序和物理内存之间，程序只能看见虚拟内存，再也不能直接访问物理内存。每个程序都有自己独立的进程地址空间，这样就做到了进程隔离。这里的进程地址空间是指虚拟地址。顾名思义既然是虚拟地址，也就是虚的，不是现实存在的地址空间。\n既然我们在程序和物理地址空间之间增加了虚拟地址，那么就要解决怎么从虚拟地址映射到物理地址，因为程序最终肯定是运行在物理内存中的，主要有分段和分页两种技术。\n分段(Segmentation)：这种方法是人们最开始使用的一种方法，基本思路是将程序所需要的内存地址空间大小的虚拟空间映射到某个\n物理地址空间。\n\n![image description](http://blog.chinaunix.net/attachment/201306/11/26611383_1370963405d40G.jpg)\n每个程序都有其独立的虚拟的独立的进程地址空间，可以看到程序A和B的虚拟地址空间都是从0x00000000开始的。我们将两块大小相同的虚拟地址空间和实际物理地址空间一一映射，即虚拟地址空间中的每个字节对应于实际地址空间中的每个字节，这个映射过程由软件来设置映射的机制，实际的转换由硬件来完成。\n这种分段的机制解决了文章一开始提到的3个问题中的进程地址空间隔离和程序地址重定位的问题。程序A和程序B有自己独立的虚拟地址空间，而且该虚拟地址空间被映射到了互相不重叠的物理地址空间，如果程序A访问虚拟地址空间的地址不在0x00000000-0x00A00000这个范围内，那么内核就会拒绝这个请求，所以它解决了隔离地址空间的问题。我们应用程序A只需要关心其虚拟地址空间0x00000000-0x00A00000，而其被映射到哪个物理地址我们无需关心，所以程序永远按照这个虚拟地址空间来放置变量，代码，不需要重新定位。\n无论如何分段机制解决了上面两个问题，是一个很大的进步，但是对于内存效率问题仍然无能为力。因为这种内存映射机制仍然是以程序为单位，当内存不足时仍然需要将整个程序交换到磁盘，这样内存使用的效率仍然很低。那么，怎么才算高效率的内存使用呢。事实上，根据程序的局部性运行原理，一个程序在运行的过程当中，在某个时间段内，只有一小部分数据会被经常用到。所以我们需要更加小粒度的内存分割和映射方法，此时是否会想到Linux中的Buddy算法和slab内存分配机制呢，哈哈。另一种将虚拟地址转换为物理地址的方法分页机制应运而生了。\n分页机制：\n分页机制就是把内存地址空间分为若干个很小的固定大小的页，每一页的大小由内存决定，就像Linux中ext文件系统将磁盘分成若干个Block一样，这样做是分别是为了提高内存和磁盘的利用率。试想以下，如果将磁盘空间分成N等份，每一份的大小(一个Block)是1M，如果我想存储在磁盘上的文件是1K字节，那么其余的999K字节是不是浪费了。所以需要更加细粒度的磁盘分割方式，我们可以将Block设置得小一点，这当然是根据所存放文件的大小来综合考虑的，好像有点跑题了，我只是想说，内存中的分页机制跟ext文件系统中的磁盘分割机制非常相似。\nLinux中一般页的大小是4KB，我们把进程的地址空间按页分割，把常用的数据和代码页装载到内存中，不常用的代码和数据保存在磁盘中，我们还是以一个例子来说明,如下图：\n\n![进程虚拟地址空间、物理地址空间和磁盘之间的页映射关系](http://blog.chinaunix.net/attachment/201306/11/26611383_1370963405d40G.jpg)\n\n我们可以看到进程1和进程2的虚拟地址空间都被映射到了不连续的物理地址空间内(这个意义很大，如果有一天我们的连续物理地址空间不够，但是不连续的地址空间很多，如果没有这种技术，我们的程序就没有办法运行),甚至他们共用了一部分物理地址空间，这就是共享内存。\n进程1的虚拟页VP2和VP3被交换到了磁盘中，在程序需要这两页的时候，Linux内核会产生一个缺页异常，然后异常管理程序会将其读到内存中。\n这就是分页机制的原理，当然Linux中的分页机制的实现还是比较复杂的，通过了也全局目录，也上级目录，页中级目录，页表等几级的分页机制来实现的，但是基本的工作原理是不会变的。\n分页机制的实现需要硬件的实现，这个硬件名字叫做MMU(Memory Management Unit)，他就是专门负责从虚拟地址到物理地址转换的，也就是从虚拟页找到物理页。\n\n\n参考文献：\n《深入理解Linux内核》\n《程序员的自我修养》","slug":"linuxneicunguanli","published":1,"updated":"2015-08-09T06:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez034000uo3d3n3zsi4s8"},{"title":"基于Hadoop平台的局域网和广域网环境下的处理性能比较","date":"2015-01-11T19:01:01.000Z","_content":"\n## 测试目标\n检验在局域网环境下的hadoop平台与广域网环境下通过VPN组建的hadoop平台在处理性能上的差异。\n实际上检测网络通信情况，通过hadoop的terasort示例工具来做排序的压力测试，通过对比排序所用时间来确定差异。\n\n<!--more-->\n## 测试环境\n\nhadoop-1.0.0\n三台vmware下的ubuntu12.04，一台为Master，两台为Slave。\n\n## 实验步骤\n### 测试局域网环境下的计算性能\na.首先搭建hadoop平台\n\nb.搭建好hadoop平台后，通过master启动hadoop\n\nc.本人hadoop装在/usr/hadoop下，首先先通过teragen工具产生一定的随机数据\n\nd.在/usr/hadoop下运行bin/hadoop jar hadoop-examples-1.0.0.jar\n\nteragen 10000000 input\n(即产生1G的文本数据，每行有100个字节，所以总共有一千万行的随机数据，产生的数据存入到hdfs用户目录的input下)\n(附：有时候输入命令，无反应。\n\n出现如下错误：\n\n　　org.apache.hadoop.dfs.SafeModeException: Cannot delete ..., Name node is in safe mode\n\n　　在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。\n\n　　解决方案是：关闭安全模式\n　　\n　　\n```\nhadoop dfsadmin -safemode leave\n```\ne.运行结束后，然后运行bin/hadoop jar hadoop-examples-1.0.0.jar terasort input output\n(这条命令是让hadoop执行文本数据的排序，从input读，最终产生的文件也在hdfs的output文件夹下，会生成一个单一的文件。)\n\nf.同时还可用/bin/hadoop jar hadoop-examples-1.0.0.jar teravalidate output validate 来执行检验排序的正确与否。\n#### 结果\n（1）通过6次重复实验，可根据e运行的结果如下：\n\n第一次：5分3秒\n第二次：4分34秒\n第三次：3分44秒\n第四次：4分20秒\n第五次：4分20秒\n第六次：3分59秒\n\n（2）同时观察到两个Slave节点在map和reduce的过程中，cpu和内存充分被利用，cpu占用率大概在60%-75%之间，内存占用百分之90以上。而当总的运算进度已达到百分之70多的时候，有一个节点的cpu和内存已经空闲，说明他自己的运算工作已经完成，另一个节点在总进度达到100%时cpu和内存变为空闲。另外，在hadoop刚刚开始运算的时候，Master瞬间cpu占用比高，之后运算空闲。这也验证了Hadoop平台的主从架构。\n### 测试广域网环境下的计算性能\n广域网测试延迟巨大，处理速度差异巨大。\n## 结论\n分布式的处理架构，对网络带宽的要求苛刻。一般内网中组建的hadoop平台，网络带宽应该在100M。如果公网能找到这样的环境，应该也是可以的。但是这种环境搭建成本太高，所以hadoop平台在广域网范围下的应用失败。\n（据说，处理1TB的数据，需要在网络中传输3TB的数据。）\n\n## 附录\n\n```\nhadoop@Master:/usr/hadoop$ bin/hadoop jar hadoop-examples-1.0.0.jar teragen 10000000 in4\nWarning: $HADOOP_HOME is deprecated.\n\n\nGenerating 10000000 using 2 maps with step of 5000000\n15/01/09 18:35:30 INFO mapred.JobClient: Running job: job_201501101813_0020\n15/01/09 18:35:31 INFO mapred.JobClient:  map 0% reduce 0%\n15/01/09 18:35:47 INFO mapred.JobClient:  map 17% reduce 0%\n15/01/09 18:35:50 INFO mapred.JobClient:  map 40% reduce 0%\n15/01/09 18:35:53 INFO mapred.JobClient:  map 46% reduce 0%\n15/01/09 18:35:54 INFO mapred.JobClient:  map 56% reduce 0%\n15/01/09 18:35:57 INFO mapred.JobClient:  map 61% reduce 0%\n15/01/09 18:35:59 INFO mapred.JobClient:  map 75% reduce 0%\n15/01/09 18:36:00 INFO mapred.JobClient:  map 84% reduce 0%\n15/01/09 18:36:03 INFO mapred.JobClient:  map 95% reduce 0%\n15/01/09 18:36:12 INFO mapred.JobClient:  map 100% reduce 0%\n15/01/09 18:36:17 INFO mapred.JobClient: Job complete: job_201501101813_0020\n15/01/09 18:36:17 INFO mapred.JobClient: Counters: 19\n15/01/09 18:36:17 INFO mapred.JobClient:   Job Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS=55752\n15/01/09 18:36:17 INFO mapred.JobClient:     Total time spent by all reduces waiting after reserving slots (ms)=0\n15/01/09 18:36:17 INFO mapred.JobClient:     Total time spent by all maps waiting after reserving slots (ms)=0\n15/01/09 18:36:17 INFO mapred.JobClient:     Launched map tasks=2\n15/01/09 18:36:17 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES=0\n15/01/09 18:36:17 INFO mapred.JobClient:   File Input Format Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     Bytes Read=0\n15/01/09 18:36:17 INFO mapred.JobClient:   File Output Format Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     Bytes Written=1000000000\n15/01/09 18:36:17 INFO mapred.JobClient:   FileSystemCounters\n15/01/09 18:36:17 INFO mapred.JobClient:     HDFS_BYTES_READ=167\n15/01/09 18:36:17 INFO mapred.JobClient:     FILE_BYTES_WRITTEN=42624\n15/01/09 18:36:17 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN=1000000000\n15/01/09 18:36:17 INFO mapred.JobClient:   Map-Reduce Framework\n15/01/09 18:36:17 INFO mapred.JobClient:     Map input records=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     Physical memory (bytes) snapshot=77443072\n15/01/09 18:36:17 INFO mapred.JobClient:     Spilled Records=0\n15/01/09 18:36:17 INFO mapred.JobClient:     CPU time spent (ms)=14870\n15/01/09 18:36:17 INFO mapred.JobClient:     Total committed heap usage (bytes)=31850496\n15/01/09 18:36:17 INFO mapred.JobClient:     Virtual memory (bytes) snapshot=694943744\n15/01/09 18:36:17 INFO mapred.JobClient:     Map input bytes=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     Map output records=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     SPLIT_RAW_BYTES=167\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhadoop@Master:/usr/hadoop$ bin/hadoop jar hadoop-examples-1.0.0.jar terasort in4                                                                              out4\nWarning: $HADOOP_HOME is deprecated.\n\n\n15/01/09 18:36:49 INFO terasort.TeraSort: starting\n15/01/09 18:36:50 INFO mapred.FileInputFormat: Total input paths to process : 2\n15/01/09 18:36:50 INFO util.NativeCodeLoader: Loaded the native-hadoop library\n15/01/09 18:36:50 INFO zlib.ZlibFactory: Successfully loaded & initialized native-zlib library\n15/01/09 18:36:50 INFO compress.CodecPool: Got brand-new compressor\nMaking 1 from 100000 records\nStep size is 100000.0\n15/01/09 18:36:50 INFO mapred.FileInputFormat: Total input paths to process : 2\n15/01/09 18:36:51 INFO mapred.JobClient: Running job: job_201501101813_0021\n15/01/09 18:36:52 INFO mapred.JobClient:  map 0% reduce 0%\n15/01/09 18:37:09 INFO mapred.JobClient:  map 10% reduce 0%\n15/01/09 18:37:11 INFO mapred.JobClient:  map 21% reduce 0%\n15/01/09 18:37:12 INFO mapred.JobClient:  map 22% reduce 0%\n15/01/09 18:37:13 INFO mapred.JobClient:  map 24% reduce 0%\n15/01/09 18:37:17 INFO mapred.JobClient:  map 25% reduce 0%\n15/01/09 18:37:23 INFO mapred.JobClient:  map 30% reduce 0%\n15/01/09 18:37:26 INFO mapred.JobClient:  map 35% reduce 0%\n15/01/09 18:37:28 INFO mapred.JobClient:  map 36% reduce 0%\n15/01/09 18:37:33 INFO mapred.JobClient:  map 37% reduce 2%\n15/01/09 18:37:39 INFO mapred.JobClient:  map 37% reduce 4%\n15/01/09 18:37:42 INFO mapred.JobClient:  map 37% reduce 6%\n15/01/09 18:37:47 INFO mapred.JobClient:  map 37% reduce 8%\n15/01/09 18:37:48 INFO mapred.JobClient:  map 37% reduce 10%\n15/01/09 18:37:49 INFO mapred.JobClient:  map 44% reduce 10%\n15/01/09 18:37:52 INFO mapred.JobClient:  map 47% reduce 10%\n15/01/09 18:37:59 INFO mapred.JobClient:  map 49% reduce 10%\n15/01/09 18:38:01 INFO mapred.JobClient:  map 56% reduce 10%\n15/01/09 18:38:03 INFO mapred.JobClient:  map 60% reduce 10%\n15/01/09 18:38:06 INFO mapred.JobClient:  map 61% reduce 12%\n15/01/09 18:38:10 INFO mapred.JobClient:  map 62% reduce 12%\n15/01/09 18:38:16 INFO mapred.JobClient:  map 66% reduce 14%\n15/01/09 18:38:20 INFO mapred.JobClient:  map 68% reduce 16%\n15/01/09 18:38:21 INFO mapred.JobClient:  map 69% reduce 16%\n15/01/09 18:38:22 INFO mapred.JobClient:  map 69% reduce 18%\n15/01/09 18:38:29 INFO mapred.JobClient:  map 73% reduce 20%\n15/01/09 18:38:32 INFO mapred.JobClient:  map 83% reduce 20%\n15/01/09 18:38:35 INFO mapred.JobClient:  map 87% reduce 20%\n15/01/09 18:38:47 INFO mapred.JobClient:  map 93% reduce 25%\n15/01/09 18:38:51 INFO mapred.JobClient:  map 95% reduce 25%\n15/01/09 18:38:54 INFO mapred.JobClient:  map 98% reduce 25%\n15/01/09 18:38:57 INFO mapred.JobClient:  map 99% reduce 27%\n15/01/09 18:39:00 INFO mapred.JobClient:  map 100% reduce 29%\n15/01/09 18:39:03 INFO mapred.JobClient:  map 100% reduce 31%\n15/01/09 18:39:12 INFO mapred.JobClient:  map 100% reduce 33%\n15/01/09 18:39:30 INFO mapred.JobClient:  map 100% reduce 67%\n15/01/09 18:39:33 INFO mapred.JobClient:  map 100% reduce 69%\n15/01/09 18:39:36 INFO mapred.JobClient:  map 100% reduce 71%\n15/01/09 18:39:39 INFO mapred.JobClient:  map 100% reduce 73%\n15/01/09 18:39:42 INFO mapred.JobClient:  map 100% reduce 75%\n15/01/09 18:39:46 INFO mapred.JobClient:  map 100% reduce 77%\n15/01/09 18:39:49 INFO mapred.JobClient:  map 100% reduce 78%\n15/01/09 18:39:52 INFO mapred.JobClient:  map 100% reduce 79%\n15/01/09 18:39:55 INFO mapred.JobClient:  map 100% reduce 81%\n15/01/09 18:39:58 INFO mapred.JobClient:  map 100% reduce 83%\n15/01/09 18:40:01 INFO mapred.JobClient:  map 100% reduce 85%\n15/01/09 18:40:04 INFO mapred.JobClient:  map 100% reduce 86%\n15/01/09 18:40:07 INFO mapred.JobClient:  map 100% reduce 88%\n15/01/09 18:40:10 INFO mapred.JobClient:  map 100% reduce 90%\n15/01/09 18:40:13 INFO mapred.JobClient:  map 100% reduce 92%\n15/01/09 18:40:16 INFO mapred.JobClient:  map 100% reduce 94%\n15/01/09 18:40:19 INFO mapred.JobClient:  map 100% reduce 96%\n15/01/09 18:40:22 INFO mapred.JobClient:  map 100% reduce 98%\n15/01/09 18:40:28 INFO mapred.JobClient:  map 100% reduce 100%\n15/01/09 18:40:39 INFO mapred.JobClient: Job complete: job_201501101813_0021\n15/01/09 18:40:40 INFO mapred.JobClient: Counters: 31\n15/01/09 18:40:40 INFO mapred.JobClient:   Job Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Launched reduce tasks=1\n15/01/09 18:40:40 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS=432306\n15/01/09 18:40:40 INFO mapred.JobClient:     Total time spent by all reduces waiting after reserving slots (ms)=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Total time spent by all maps waiting after reserving slots (ms)=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Rack-local map tasks=2\n15/01/09 18:40:40 INFO mapred.JobClient:     Launched map tasks=18\n15/01/09 18:40:40 INFO mapred.JobClient:     Data-local map tasks=16\n15/01/09 18:40:40 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES=193553\n15/01/09 18:40:40 INFO mapred.JobClient:   File Input Format Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Bytes Read=1000057358\n15/01/09 18:40:40 INFO mapred.JobClient:   File Output Format Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Bytes Written=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:   FileSystemCounters\n15/01/09 18:40:40 INFO mapred.JobClient:     FILE_BYTES_READ=2382257412\n15/01/09 18:40:40 INFO mapred.JobClient:     HDFS_BYTES_READ=1000059054\n15/01/09 18:40:40 INFO mapred.JobClient:     FILE_BYTES_WRITTEN=3402633323\n15/01/09 18:40:40 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:   Map-Reduce Framework\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output materialized bytes=1020000096\n15/01/09 18:40:40 INFO mapred.JobClient:     Map input records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce shuffle bytes=1020000096\n15/01/09 18:40:40 INFO mapred.JobClient:     Spilled Records=33355441\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output bytes=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Total committed heap usage (bytes)=2367090688\n15/01/09 18:40:40 INFO mapred.JobClient:     CPU time spent (ms)=124990\n15/01/09 18:40:40 INFO mapred.JobClient:     Map input bytes=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:     SPLIT_RAW_BYTES=1696\n15/01/09 18:40:40 INFO mapred.JobClient:     Combine input records=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce input records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce input groups=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Combine output records=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Physical memory (bytes) snapshot=2481545216\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce output records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Virtual memory (bytes) snapshot=5898289152\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output records=10000000\n15/01/09 18:40:40 INFO terasort.TeraSort: done\n```\n","source":"_posts/hadoop.md","raw":"title: 基于Hadoop平台的局域网和广域网环境下的处理性能比较  \ndate: 2015-1-11 14:01:01\ncategories: hadoop \ntags: [hadoop,n2n,vpn] \n\n---\n\n## 测试目标\n检验在局域网环境下的hadoop平台与广域网环境下通过VPN组建的hadoop平台在处理性能上的差异。\n实际上检测网络通信情况，通过hadoop的terasort示例工具来做排序的压力测试，通过对比排序所用时间来确定差异。\n\n<!--more-->\n## 测试环境\n\nhadoop-1.0.0\n三台vmware下的ubuntu12.04，一台为Master，两台为Slave。\n\n## 实验步骤\n### 测试局域网环境下的计算性能\na.首先搭建hadoop平台\n\nb.搭建好hadoop平台后，通过master启动hadoop\n\nc.本人hadoop装在/usr/hadoop下，首先先通过teragen工具产生一定的随机数据\n\nd.在/usr/hadoop下运行bin/hadoop jar hadoop-examples-1.0.0.jar\n\nteragen 10000000 input\n(即产生1G的文本数据，每行有100个字节，所以总共有一千万行的随机数据，产生的数据存入到hdfs用户目录的input下)\n(附：有时候输入命令，无反应。\n\n出现如下错误：\n\n　　org.apache.hadoop.dfs.SafeModeException: Cannot delete ..., Name node is in safe mode\n\n　　在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。\n\n　　解决方案是：关闭安全模式\n　　\n　　\n```\nhadoop dfsadmin -safemode leave\n```\ne.运行结束后，然后运行bin/hadoop jar hadoop-examples-1.0.0.jar terasort input output\n(这条命令是让hadoop执行文本数据的排序，从input读，最终产生的文件也在hdfs的output文件夹下，会生成一个单一的文件。)\n\nf.同时还可用/bin/hadoop jar hadoop-examples-1.0.0.jar teravalidate output validate 来执行检验排序的正确与否。\n#### 结果\n（1）通过6次重复实验，可根据e运行的结果如下：\n\n第一次：5分3秒\n第二次：4分34秒\n第三次：3分44秒\n第四次：4分20秒\n第五次：4分20秒\n第六次：3分59秒\n\n（2）同时观察到两个Slave节点在map和reduce的过程中，cpu和内存充分被利用，cpu占用率大概在60%-75%之间，内存占用百分之90以上。而当总的运算进度已达到百分之70多的时候，有一个节点的cpu和内存已经空闲，说明他自己的运算工作已经完成，另一个节点在总进度达到100%时cpu和内存变为空闲。另外，在hadoop刚刚开始运算的时候，Master瞬间cpu占用比高，之后运算空闲。这也验证了Hadoop平台的主从架构。\n### 测试广域网环境下的计算性能\n广域网测试延迟巨大，处理速度差异巨大。\n## 结论\n分布式的处理架构，对网络带宽的要求苛刻。一般内网中组建的hadoop平台，网络带宽应该在100M。如果公网能找到这样的环境，应该也是可以的。但是这种环境搭建成本太高，所以hadoop平台在广域网范围下的应用失败。\n（据说，处理1TB的数据，需要在网络中传输3TB的数据。）\n\n## 附录\n\n```\nhadoop@Master:/usr/hadoop$ bin/hadoop jar hadoop-examples-1.0.0.jar teragen 10000000 in4\nWarning: $HADOOP_HOME is deprecated.\n\n\nGenerating 10000000 using 2 maps with step of 5000000\n15/01/09 18:35:30 INFO mapred.JobClient: Running job: job_201501101813_0020\n15/01/09 18:35:31 INFO mapred.JobClient:  map 0% reduce 0%\n15/01/09 18:35:47 INFO mapred.JobClient:  map 17% reduce 0%\n15/01/09 18:35:50 INFO mapred.JobClient:  map 40% reduce 0%\n15/01/09 18:35:53 INFO mapred.JobClient:  map 46% reduce 0%\n15/01/09 18:35:54 INFO mapred.JobClient:  map 56% reduce 0%\n15/01/09 18:35:57 INFO mapred.JobClient:  map 61% reduce 0%\n15/01/09 18:35:59 INFO mapred.JobClient:  map 75% reduce 0%\n15/01/09 18:36:00 INFO mapred.JobClient:  map 84% reduce 0%\n15/01/09 18:36:03 INFO mapred.JobClient:  map 95% reduce 0%\n15/01/09 18:36:12 INFO mapred.JobClient:  map 100% reduce 0%\n15/01/09 18:36:17 INFO mapred.JobClient: Job complete: job_201501101813_0020\n15/01/09 18:36:17 INFO mapred.JobClient: Counters: 19\n15/01/09 18:36:17 INFO mapred.JobClient:   Job Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS=55752\n15/01/09 18:36:17 INFO mapred.JobClient:     Total time spent by all reduces waiting after reserving slots (ms)=0\n15/01/09 18:36:17 INFO mapred.JobClient:     Total time spent by all maps waiting after reserving slots (ms)=0\n15/01/09 18:36:17 INFO mapred.JobClient:     Launched map tasks=2\n15/01/09 18:36:17 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES=0\n15/01/09 18:36:17 INFO mapred.JobClient:   File Input Format Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     Bytes Read=0\n15/01/09 18:36:17 INFO mapred.JobClient:   File Output Format Counters\n15/01/09 18:36:17 INFO mapred.JobClient:     Bytes Written=1000000000\n15/01/09 18:36:17 INFO mapred.JobClient:   FileSystemCounters\n15/01/09 18:36:17 INFO mapred.JobClient:     HDFS_BYTES_READ=167\n15/01/09 18:36:17 INFO mapred.JobClient:     FILE_BYTES_WRITTEN=42624\n15/01/09 18:36:17 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN=1000000000\n15/01/09 18:36:17 INFO mapred.JobClient:   Map-Reduce Framework\n15/01/09 18:36:17 INFO mapred.JobClient:     Map input records=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     Physical memory (bytes) snapshot=77443072\n15/01/09 18:36:17 INFO mapred.JobClient:     Spilled Records=0\n15/01/09 18:36:17 INFO mapred.JobClient:     CPU time spent (ms)=14870\n15/01/09 18:36:17 INFO mapred.JobClient:     Total committed heap usage (bytes)=31850496\n15/01/09 18:36:17 INFO mapred.JobClient:     Virtual memory (bytes) snapshot=694943744\n15/01/09 18:36:17 INFO mapred.JobClient:     Map input bytes=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     Map output records=10000000\n15/01/09 18:36:17 INFO mapred.JobClient:     SPLIT_RAW_BYTES=167\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhadoop@Master:/usr/hadoop$ bin/hadoop jar hadoop-examples-1.0.0.jar terasort in4                                                                              out4\nWarning: $HADOOP_HOME is deprecated.\n\n\n15/01/09 18:36:49 INFO terasort.TeraSort: starting\n15/01/09 18:36:50 INFO mapred.FileInputFormat: Total input paths to process : 2\n15/01/09 18:36:50 INFO util.NativeCodeLoader: Loaded the native-hadoop library\n15/01/09 18:36:50 INFO zlib.ZlibFactory: Successfully loaded & initialized native-zlib library\n15/01/09 18:36:50 INFO compress.CodecPool: Got brand-new compressor\nMaking 1 from 100000 records\nStep size is 100000.0\n15/01/09 18:36:50 INFO mapred.FileInputFormat: Total input paths to process : 2\n15/01/09 18:36:51 INFO mapred.JobClient: Running job: job_201501101813_0021\n15/01/09 18:36:52 INFO mapred.JobClient:  map 0% reduce 0%\n15/01/09 18:37:09 INFO mapred.JobClient:  map 10% reduce 0%\n15/01/09 18:37:11 INFO mapred.JobClient:  map 21% reduce 0%\n15/01/09 18:37:12 INFO mapred.JobClient:  map 22% reduce 0%\n15/01/09 18:37:13 INFO mapred.JobClient:  map 24% reduce 0%\n15/01/09 18:37:17 INFO mapred.JobClient:  map 25% reduce 0%\n15/01/09 18:37:23 INFO mapred.JobClient:  map 30% reduce 0%\n15/01/09 18:37:26 INFO mapred.JobClient:  map 35% reduce 0%\n15/01/09 18:37:28 INFO mapred.JobClient:  map 36% reduce 0%\n15/01/09 18:37:33 INFO mapred.JobClient:  map 37% reduce 2%\n15/01/09 18:37:39 INFO mapred.JobClient:  map 37% reduce 4%\n15/01/09 18:37:42 INFO mapred.JobClient:  map 37% reduce 6%\n15/01/09 18:37:47 INFO mapred.JobClient:  map 37% reduce 8%\n15/01/09 18:37:48 INFO mapred.JobClient:  map 37% reduce 10%\n15/01/09 18:37:49 INFO mapred.JobClient:  map 44% reduce 10%\n15/01/09 18:37:52 INFO mapred.JobClient:  map 47% reduce 10%\n15/01/09 18:37:59 INFO mapred.JobClient:  map 49% reduce 10%\n15/01/09 18:38:01 INFO mapred.JobClient:  map 56% reduce 10%\n15/01/09 18:38:03 INFO mapred.JobClient:  map 60% reduce 10%\n15/01/09 18:38:06 INFO mapred.JobClient:  map 61% reduce 12%\n15/01/09 18:38:10 INFO mapred.JobClient:  map 62% reduce 12%\n15/01/09 18:38:16 INFO mapred.JobClient:  map 66% reduce 14%\n15/01/09 18:38:20 INFO mapred.JobClient:  map 68% reduce 16%\n15/01/09 18:38:21 INFO mapred.JobClient:  map 69% reduce 16%\n15/01/09 18:38:22 INFO mapred.JobClient:  map 69% reduce 18%\n15/01/09 18:38:29 INFO mapred.JobClient:  map 73% reduce 20%\n15/01/09 18:38:32 INFO mapred.JobClient:  map 83% reduce 20%\n15/01/09 18:38:35 INFO mapred.JobClient:  map 87% reduce 20%\n15/01/09 18:38:47 INFO mapred.JobClient:  map 93% reduce 25%\n15/01/09 18:38:51 INFO mapred.JobClient:  map 95% reduce 25%\n15/01/09 18:38:54 INFO mapred.JobClient:  map 98% reduce 25%\n15/01/09 18:38:57 INFO mapred.JobClient:  map 99% reduce 27%\n15/01/09 18:39:00 INFO mapred.JobClient:  map 100% reduce 29%\n15/01/09 18:39:03 INFO mapred.JobClient:  map 100% reduce 31%\n15/01/09 18:39:12 INFO mapred.JobClient:  map 100% reduce 33%\n15/01/09 18:39:30 INFO mapred.JobClient:  map 100% reduce 67%\n15/01/09 18:39:33 INFO mapred.JobClient:  map 100% reduce 69%\n15/01/09 18:39:36 INFO mapred.JobClient:  map 100% reduce 71%\n15/01/09 18:39:39 INFO mapred.JobClient:  map 100% reduce 73%\n15/01/09 18:39:42 INFO mapred.JobClient:  map 100% reduce 75%\n15/01/09 18:39:46 INFO mapred.JobClient:  map 100% reduce 77%\n15/01/09 18:39:49 INFO mapred.JobClient:  map 100% reduce 78%\n15/01/09 18:39:52 INFO mapred.JobClient:  map 100% reduce 79%\n15/01/09 18:39:55 INFO mapred.JobClient:  map 100% reduce 81%\n15/01/09 18:39:58 INFO mapred.JobClient:  map 100% reduce 83%\n15/01/09 18:40:01 INFO mapred.JobClient:  map 100% reduce 85%\n15/01/09 18:40:04 INFO mapred.JobClient:  map 100% reduce 86%\n15/01/09 18:40:07 INFO mapred.JobClient:  map 100% reduce 88%\n15/01/09 18:40:10 INFO mapred.JobClient:  map 100% reduce 90%\n15/01/09 18:40:13 INFO mapred.JobClient:  map 100% reduce 92%\n15/01/09 18:40:16 INFO mapred.JobClient:  map 100% reduce 94%\n15/01/09 18:40:19 INFO mapred.JobClient:  map 100% reduce 96%\n15/01/09 18:40:22 INFO mapred.JobClient:  map 100% reduce 98%\n15/01/09 18:40:28 INFO mapred.JobClient:  map 100% reduce 100%\n15/01/09 18:40:39 INFO mapred.JobClient: Job complete: job_201501101813_0021\n15/01/09 18:40:40 INFO mapred.JobClient: Counters: 31\n15/01/09 18:40:40 INFO mapred.JobClient:   Job Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Launched reduce tasks=1\n15/01/09 18:40:40 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS=432306\n15/01/09 18:40:40 INFO mapred.JobClient:     Total time spent by all reduces waiting after reserving slots (ms)=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Total time spent by all maps waiting after reserving slots (ms)=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Rack-local map tasks=2\n15/01/09 18:40:40 INFO mapred.JobClient:     Launched map tasks=18\n15/01/09 18:40:40 INFO mapred.JobClient:     Data-local map tasks=16\n15/01/09 18:40:40 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES=193553\n15/01/09 18:40:40 INFO mapred.JobClient:   File Input Format Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Bytes Read=1000057358\n15/01/09 18:40:40 INFO mapred.JobClient:   File Output Format Counters\n15/01/09 18:40:40 INFO mapred.JobClient:     Bytes Written=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:   FileSystemCounters\n15/01/09 18:40:40 INFO mapred.JobClient:     FILE_BYTES_READ=2382257412\n15/01/09 18:40:40 INFO mapred.JobClient:     HDFS_BYTES_READ=1000059054\n15/01/09 18:40:40 INFO mapred.JobClient:     FILE_BYTES_WRITTEN=3402633323\n15/01/09 18:40:40 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:   Map-Reduce Framework\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output materialized bytes=1020000096\n15/01/09 18:40:40 INFO mapred.JobClient:     Map input records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce shuffle bytes=1020000096\n15/01/09 18:40:40 INFO mapred.JobClient:     Spilled Records=33355441\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output bytes=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Total committed heap usage (bytes)=2367090688\n15/01/09 18:40:40 INFO mapred.JobClient:     CPU time spent (ms)=124990\n15/01/09 18:40:40 INFO mapred.JobClient:     Map input bytes=1000000000\n15/01/09 18:40:40 INFO mapred.JobClient:     SPLIT_RAW_BYTES=1696\n15/01/09 18:40:40 INFO mapred.JobClient:     Combine input records=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce input records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce input groups=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Combine output records=0\n15/01/09 18:40:40 INFO mapred.JobClient:     Physical memory (bytes) snapshot=2481545216\n15/01/09 18:40:40 INFO mapred.JobClient:     Reduce output records=10000000\n15/01/09 18:40:40 INFO mapred.JobClient:     Virtual memory (bytes) snapshot=5898289152\n15/01/09 18:40:40 INFO mapred.JobClient:     Map output records=10000000\n15/01/09 18:40:40 INFO terasort.TeraSort: done\n```\n","slug":"hadoop","published":1,"updated":"2015-08-09T06:16:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez03f0013o3d3w2y7cxax"},{"title":"移植busybox到开发板","date":"2015-04-11T18:01:01.000Z","_content":"\n折腾了两天，终于把这个做好，移植的工作还是很辛苦的，目前自己对/etc/下的配置文件的逻辑关系还不是太清晰，这还需要后续的努力，一些心得，更多的是备忘，把这些东西记录下来。\n\n<!--more-->\n## 1.我的需求\n\n由于目前的实验平台没有telnet和ftp，所以在软件调试过程中，只能用串口和SD卡来交互和传送文件。于是就想到自己定制一个文件系统，此文件系统包含这两个功能，另外由于项目的需求为一个演示系统，所以还需要在主板自带的屏幕上输出 程序的打印信息。\n\n## 2.实验环境\n1.PC机位ubuntu 12.04 , 交叉编译工具gcc version 4.4.1 (Sourcery G++ Lite 2009q3-67)\n\n2.嵌入式主板为：DevKit 8000 \n\n3.busybox版本为：1.13.1\n\n4.vsftp 版本为：2.0.5\n### 3.实验过程\n1.首先需要编译busybox，编译的过程网上有很多的教程。telnet就再busybox中编译。\n\nmake install 之后会在 当前目前下的_install/目录下生成所需要的几个目录。\nbin sbin linuxrc usr(这个我并没有编译)\n\n2.把上边的三个文件夹放到一个新建的rootfs/下，剩下的文件我并没有自己去建。 把原来devkit8000的文件系统解压之后，我放到了rootfs下，（需要注意的是，/etc目录下的文件我没有拷贝，因为之前拷贝过很多次，会出 现各种各样的问题，所以/etc下的文件，我用的是天嵌的板子tq335x文件系统中的/etc/）\n\n3.值得注意的是，profile和init.d/rcS中的文件要进行一些调整，以下是调整之后的。\n```\n/etc/profile  \n```\n\n```\n# Ash profile   \n# vim: syntax=sh  \n  \n# No core files by default  \n#ulimit -S -c 0 > /dev/null 2>&1  \n  \nexport set HOME=/root  \nexport set QTDIR=/opt/PDA  \nexport set QPEDIR=/opt/PDA  \nexport set QWS_DISPLAY=\"LinuxFB:/dev/fb0\"  \nexport set QWS_KEYBOARD=\"TTY:/dev/tty1\"  \nif [ -f /sys/devices/virtual/input/mice/subsystem/input$ts/uevent ] ; then  \n        export set TSLIB_CONFFILE=/etc/ts.conf  \n        if [ -n \"$pointer\" ] ; then  \n                export set TSLIB_CALIBFILE=$pointer  \n        fi  \n        export set TSLIB_TSDEVICE=/dev/event$ts  \n        export set TSLIB_PLUGINDIR=/lib/ts  \n        export set QWS_MOUSE_PROTO=\"TSLIB:/dev/event$ts MouseMan:/dev/mice\"  \nfi  \nexport set QT_PLUGIN_PATH=$QTDIR/plugins/  \nexport set QT_QWS_FONTDIR=$QTDIR/lib/fonts/  \nexport set PATH=$QPEDIR/bin:$PATH  \nexport set LD_LIBRARY_PATH=$QTDIR/lib:$QPEDIR/plugins/imageformats:$QPEDIR/plugins/accessible:$LD_LIBRARY_PATH  \n  \n#USER=\"`id -un`\"  \n#LOGNAME=$USER  \n#PS1='[\\u@\\h \\W]# '  \n#PATH=$PATH  \n  \n#HOSTNAME=`/bin/hostname`  \n  \n/bin/hostname FlyingGames  \nPS1=\"[\"\"$(whoami)\"@\"$(hostname): \"'$PWD'\"]# \"  \n  \n  \nexport USER LOGNAME PS1 PATH  \n\n[cpp] view plaincopyprint?\n/etc/init.d/rcS  \n[cpp] view plaincopyprint?\n#!/bin/sh  \n  \n  \nPATH=/sbin:/bin:/usr/sbin:/usr/bin  \nrunlevel=S  \nprevlevel=N  \numask 022  \nexport PATH runlevel prevlevel  \n  \n#  \n#       Trap CTRL-C &c only in this shell so we can interrupt subprocesses.  \n#  \n  \nmount -a  \nmkdir -p /dev/pts  \nmount -t devpts devpts /dev/pts  \nmount -n -t usbfs none /proc/bus/usb  \necho /sbin/mdev > /proc/sys/kernel/hotplug  \nmdev -s  \nmkdir -p /var/lock  \n  \n#modprobe rt5370sta  \n  \nhwclock -s  \n#EmbedSky_wdg &  \n  \n  \nifconfig lo 127.0.0.1  \nnet_set &  \n  \n/etc/rc.d/init.d/netd start  \n/etc/rc.d/init.d/httpd start  \n/etc/rc.d/init.d/leds start  \n  \nInputAdapter  \n#pda &  \n#/bin/hostname -F /etc/sysconfig/HOSTNAME  \n  \n#telnet  stream  tcp     nowait  root    /usr/sbin/telnetd       /usr/sbin/telnetd -i  \n/usr/sbin/telnetd &  \n/usr/sbin/vsftpd &  \n  \n  \ninsmod /usr/lib/rt3070sta.ko  \nsleep 1  \n```\n至此，telnet已经做完。\n\n4.接下来要做的是vsftp的移植，vsftp不同于telnetd，telnetd是在busybox自带的就有了，但是ftpd我在make menuconfig后找了好半天，都找不到有ftpd，无奈，只能用vsftp这个第三方的程序。[参考](http://blog.163.com/sunshine_linting/blog/static/44893323201391010522601/)\n\n5.接下来要做的是把文件系统打包，拷贝到主板上。\n\n```\n/home/embest/work/tools/mkfs.ubifs -r rootfs -m 2048 -e 129024 -c 812 -o ubifs.img\n/home/embest/work/tools/ubinize -o ubi.img -m 2048 -p 128KiB -s 512 /home/embest/work/tools/ubinize.cfg\ncp ubi.img /media/LABEL1\n```\n6.把sd卡插到主板上\n\n\n```\nmmcinit\nfatload mmc 0:1 81000000 ubi.img\nnand unlock\nnand ecc sw\nnand erase 680000\nband write.i 81000000 680000 $(file size)\n//开机即可。\n```\n**附：开机之后在主板的屏幕上是没有任何登陆信息的。这时候需要通过登陆telnet然后启动程序。启动程序的时候记得加个重定向 。**\n\n```\nxxxx > /dev/tty0\n\nWifi-Module-804  /   WifiModule\n```\n","source":"_posts/busybox.md","raw":"title: 移植busybox到开发板   \ndate: 2015-4-11 14:01:01\ncategories: 嵌入式linux \ntags: [文件系统,busybox,移植] \n\n---\n\n折腾了两天，终于把这个做好，移植的工作还是很辛苦的，目前自己对/etc/下的配置文件的逻辑关系还不是太清晰，这还需要后续的努力，一些心得，更多的是备忘，把这些东西记录下来。\n\n<!--more-->\n## 1.我的需求\n\n由于目前的实验平台没有telnet和ftp，所以在软件调试过程中，只能用串口和SD卡来交互和传送文件。于是就想到自己定制一个文件系统，此文件系统包含这两个功能，另外由于项目的需求为一个演示系统，所以还需要在主板自带的屏幕上输出 程序的打印信息。\n\n## 2.实验环境\n1.PC机位ubuntu 12.04 , 交叉编译工具gcc version 4.4.1 (Sourcery G++ Lite 2009q3-67)\n\n2.嵌入式主板为：DevKit 8000 \n\n3.busybox版本为：1.13.1\n\n4.vsftp 版本为：2.0.5\n### 3.实验过程\n1.首先需要编译busybox，编译的过程网上有很多的教程。telnet就再busybox中编译。\n\nmake install 之后会在 当前目前下的_install/目录下生成所需要的几个目录。\nbin sbin linuxrc usr(这个我并没有编译)\n\n2.把上边的三个文件夹放到一个新建的rootfs/下，剩下的文件我并没有自己去建。 把原来devkit8000的文件系统解压之后，我放到了rootfs下，（需要注意的是，/etc目录下的文件我没有拷贝，因为之前拷贝过很多次，会出 现各种各样的问题，所以/etc下的文件，我用的是天嵌的板子tq335x文件系统中的/etc/）\n\n3.值得注意的是，profile和init.d/rcS中的文件要进行一些调整，以下是调整之后的。\n```\n/etc/profile  \n```\n\n```\n# Ash profile   \n# vim: syntax=sh  \n  \n# No core files by default  \n#ulimit -S -c 0 > /dev/null 2>&1  \n  \nexport set HOME=/root  \nexport set QTDIR=/opt/PDA  \nexport set QPEDIR=/opt/PDA  \nexport set QWS_DISPLAY=\"LinuxFB:/dev/fb0\"  \nexport set QWS_KEYBOARD=\"TTY:/dev/tty1\"  \nif [ -f /sys/devices/virtual/input/mice/subsystem/input$ts/uevent ] ; then  \n        export set TSLIB_CONFFILE=/etc/ts.conf  \n        if [ -n \"$pointer\" ] ; then  \n                export set TSLIB_CALIBFILE=$pointer  \n        fi  \n        export set TSLIB_TSDEVICE=/dev/event$ts  \n        export set TSLIB_PLUGINDIR=/lib/ts  \n        export set QWS_MOUSE_PROTO=\"TSLIB:/dev/event$ts MouseMan:/dev/mice\"  \nfi  \nexport set QT_PLUGIN_PATH=$QTDIR/plugins/  \nexport set QT_QWS_FONTDIR=$QTDIR/lib/fonts/  \nexport set PATH=$QPEDIR/bin:$PATH  \nexport set LD_LIBRARY_PATH=$QTDIR/lib:$QPEDIR/plugins/imageformats:$QPEDIR/plugins/accessible:$LD_LIBRARY_PATH  \n  \n#USER=\"`id -un`\"  \n#LOGNAME=$USER  \n#PS1='[\\u@\\h \\W]# '  \n#PATH=$PATH  \n  \n#HOSTNAME=`/bin/hostname`  \n  \n/bin/hostname FlyingGames  \nPS1=\"[\"\"$(whoami)\"@\"$(hostname): \"'$PWD'\"]# \"  \n  \n  \nexport USER LOGNAME PS1 PATH  \n\n[cpp] view plaincopyprint?\n/etc/init.d/rcS  \n[cpp] view plaincopyprint?\n#!/bin/sh  \n  \n  \nPATH=/sbin:/bin:/usr/sbin:/usr/bin  \nrunlevel=S  \nprevlevel=N  \numask 022  \nexport PATH runlevel prevlevel  \n  \n#  \n#       Trap CTRL-C &c only in this shell so we can interrupt subprocesses.  \n#  \n  \nmount -a  \nmkdir -p /dev/pts  \nmount -t devpts devpts /dev/pts  \nmount -n -t usbfs none /proc/bus/usb  \necho /sbin/mdev > /proc/sys/kernel/hotplug  \nmdev -s  \nmkdir -p /var/lock  \n  \n#modprobe rt5370sta  \n  \nhwclock -s  \n#EmbedSky_wdg &  \n  \n  \nifconfig lo 127.0.0.1  \nnet_set &  \n  \n/etc/rc.d/init.d/netd start  \n/etc/rc.d/init.d/httpd start  \n/etc/rc.d/init.d/leds start  \n  \nInputAdapter  \n#pda &  \n#/bin/hostname -F /etc/sysconfig/HOSTNAME  \n  \n#telnet  stream  tcp     nowait  root    /usr/sbin/telnetd       /usr/sbin/telnetd -i  \n/usr/sbin/telnetd &  \n/usr/sbin/vsftpd &  \n  \n  \ninsmod /usr/lib/rt3070sta.ko  \nsleep 1  \n```\n至此，telnet已经做完。\n\n4.接下来要做的是vsftp的移植，vsftp不同于telnetd，telnetd是在busybox自带的就有了，但是ftpd我在make menuconfig后找了好半天，都找不到有ftpd，无奈，只能用vsftp这个第三方的程序。[参考](http://blog.163.com/sunshine_linting/blog/static/44893323201391010522601/)\n\n5.接下来要做的是把文件系统打包，拷贝到主板上。\n\n```\n/home/embest/work/tools/mkfs.ubifs -r rootfs -m 2048 -e 129024 -c 812 -o ubifs.img\n/home/embest/work/tools/ubinize -o ubi.img -m 2048 -p 128KiB -s 512 /home/embest/work/tools/ubinize.cfg\ncp ubi.img /media/LABEL1\n```\n6.把sd卡插到主板上\n\n\n```\nmmcinit\nfatload mmc 0:1 81000000 ubi.img\nnand unlock\nnand ecc sw\nnand erase 680000\nband write.i 81000000 680000 $(file size)\n//开机即可。\n```\n**附：开机之后在主板的屏幕上是没有任何登陆信息的。这时候需要通过登陆telnet然后启动程序。启动程序的时候记得加个重定向 。**\n\n```\nxxxx > /dev/tty0\n\nWifi-Module-804  /   WifiModule\n```\n","slug":"busybox","published":1,"updated":"2015-08-09T06:28:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez044001co3d3525tfaq8"},{"title":"良心DNS","date":"2015-07-16T00:10:29.000Z","description":"提供可替换的DNS","_content":"## 比较好用的dns\n### 国内DNS\n<!--more-->\n```\n1.aliDNS：223.5.5.5；223.6.6.6\n\n2.114DNS：114.114.114.114；114.114.115.115\n\n3.oneDNS：112.124.47.27\n```\n### 国外DNS\n```\n1.V2EX DNS：199.91.73.222；178.79.131.110\n\n2.Google DNS：8.8.8.8；8.8.4.4\n\n3.OpenDNS：208.67.222.222；208.67.220.220\n```","source":"_posts/Liangxindns.md","raw":"title: 良心DNS \ndate: 2015-7-15 20:10:29\ncategories: 网络技术 \ntags: [DNS，第三方DNS] \ndescription: 提供可替换的DNS\n---\n## 比较好用的dns\n### 国内DNS\n<!--more-->\n```\n1.aliDNS：223.5.5.5；223.6.6.6\n\n2.114DNS：114.114.114.114；114.114.115.115\n\n3.oneDNS：112.124.47.27\n```\n### 国外DNS\n```\n1.V2EX DNS：199.91.73.222；178.79.131.110\n\n2.Google DNS：8.8.8.8；8.8.4.4\n\n3.OpenDNS：208.67.222.222；208.67.220.220\n```","slug":"Liangxindns","published":1,"updated":"2015-08-09T06:53:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid4ez04f001ko3d31egh6wjt"}],"PostAsset":[],"PostCategory":[{"post_id":"cid4ez01f0003o3d31car7xdr","category_id":"cid4ez01u0004o3d3kt2vznxs","_id":"cid4ez0210007o3d3hpdai5j7"},{"post_id":"cid4ez027000co3d3jb63tawa","category_id":"cid4ez028000do3d3hon4ixjn","_id":"cid4ez029000go3d39pvp1qjv"},{"post_id":"cid4ez02h000jo3d35orphhcj","category_id":"cid4ez02o000ko3d3lgxu98iu","_id":"cid4ez02q000no3d3pd14j5b4"},{"post_id":"cid4ez034000uo3d3n3zsi4s8","category_id":"cid4ez036000vo3d38i2wnsda","_id":"cid4ez037000yo3d3qqevfdhn"},{"post_id":"cid4ez03f0013o3d3w2y7cxax","category_id":"cid4ez03l0014o3d39cu4x0yl","_id":"cid4ez03n0017o3d36dupgkbv"},{"post_id":"cid4ez044001co3d3525tfaq8","category_id":"cid4ez02o000ko3d3lgxu98iu","_id":"cid4ez046001do3d3r611vpp5"},{"post_id":"cid4ez04f001ko3d31egh6wjt","category_id":"cid4ez01u0004o3d3kt2vznxs","_id":"cid4ez04l001lo3d34nzeitfi"}],"PostTag":[{"post_id":"cid4ez01f0003o3d31car7xdr","tag_id":"cid4ez01u0005o3d36t824u4t","_id":"cid4ez0220009o3d3bscovflt"},{"post_id":"cid4ez01f0003o3d31car7xdr","tag_id":"cid4ez0210006o3d30z5eln9t","_id":"cid4ez022000ao3d3aki8kbgx"},{"post_id":"cid4ez01f0003o3d31car7xdr","tag_id":"cid4ez0220008o3d3fvmmlhr7","_id":"cid4ez023000bo3d33a5wun0q"},{"post_id":"cid4ez027000co3d3jb63tawa","tag_id":"cid4ez029000eo3d3vs6coihm","_id":"cid4ez02a000ho3d3ut14cu6d"},{"post_id":"cid4ez027000co3d3jb63tawa","tag_id":"cid4ez029000fo3d3rtc0en8f","_id":"cid4ez02c000io3d3h36md1p0"},{"post_id":"cid4ez02h000jo3d35orphhcj","tag_id":"cid4ez02o000lo3d3n4iads3b","_id":"cid4ez02x000qo3d3tsp27d6s"},{"post_id":"cid4ez02h000jo3d35orphhcj","tag_id":"cid4ez02q000mo3d3amiwsq6z","_id":"cid4ez02y000ro3d32nfnirx8"},{"post_id":"cid4ez02h000jo3d35orphhcj","tag_id":"cid4ez02q000oo3d3jlawxayq","_id":"cid4ez02y000so3d3kw804n1v"},{"post_id":"cid4ez02h000jo3d35orphhcj","tag_id":"cid4ez02w000po3d3nlgw7uyw","_id":"cid4ez02y000to3d33w4631u1"},{"post_id":"cid4ez034000uo3d3n3zsi4s8","tag_id":"cid4ez036000wo3d321sti073","_id":"cid4ez03d0010o3d3g3u19gau"},{"post_id":"cid4ez034000uo3d3n3zsi4s8","tag_id":"cid4ez036000xo3d3iwsmvdse","_id":"cid4ez03d0011o3d3iz54fekb"},{"post_id":"cid4ez034000uo3d3n3zsi4s8","tag_id":"cid4ez037000zo3d3rtmrl65e","_id":"cid4ez03d0012o3d3qtqecrvp"},{"post_id":"cid4ez03f0013o3d3w2y7cxax","tag_id":"cid4ez03l0015o3d3552txjkl","_id":"cid4ez03u0019o3d3bdack6d3"},{"post_id":"cid4ez03f0013o3d3w2y7cxax","tag_id":"cid4ez03m0016o3d31h67e17x","_id":"cid4ez03u001ao3d3kugu1n4i"},{"post_id":"cid4ez03f0013o3d3w2y7cxax","tag_id":"cid4ez03t0018o3d3tr7on08f","_id":"cid4ez03u001bo3d30ar0jxdq"},{"post_id":"cid4ez044001co3d3525tfaq8","tag_id":"cid4ez046001eo3d3l7265wj3","_id":"cid4ez04c001ho3d3fk5jy1sx"},{"post_id":"cid4ez044001co3d3525tfaq8","tag_id":"cid4ez047001fo3d3c2z0rcfl","_id":"cid4ez04c001io3d3zkqh7s2u"},{"post_id":"cid4ez044001co3d3525tfaq8","tag_id":"cid4ez04c001go3d39izqqrbp","_id":"cid4ez04d001jo3d3z8rd6nio"},{"post_id":"cid4ez04f001ko3d31egh6wjt","tag_id":"cid4ez04l001mo3d3ia5khh0x","_id":"cid4ez04m001no3d3vtxtj3lq"}],"Tag":[{"name":"ssh反向代理","_id":"cid4ez01u0005o3d36t824u4t"},{"name":"ssh","_id":"cid4ez0210006o3d30z5eln9t"},{"name":"穿越内网","_id":"cid4ez0220008o3d3fvmmlhr7"},{"name":"excel","_id":"cid4ez029000eo3d3vs6coihm"},{"name":"phpmyadmin","_id":"cid4ez029000fo3d3rtc0en8f"},{"name":"uboot定制","_id":"cid4ez02o000lo3d3n4iads3b"},{"name":"内核编译","_id":"cid4ez02q000mo3d3amiwsq6z"},{"name":"打印机共享","_id":"cid4ez02q000oo3d3jlawxayq"},{"name":"openwrt","_id":"cid4ez02w000po3d3nlgw7uyw"},{"name":"linux","_id":"cid4ez036000wo3d321sti073"},{"name":"内存管理","_id":"cid4ez036000xo3d3iwsmvdse"},{"name":"分页技术","_id":"cid4ez037000zo3d3rtmrl65e"},{"name":"hadoop","_id":"cid4ez03l0015o3d3552txjkl"},{"name":"n2n","_id":"cid4ez03m0016o3d31h67e17x"},{"name":"vpn","_id":"cid4ez03t0018o3d3tr7on08f"},{"name":"文件系统","_id":"cid4ez046001eo3d3l7265wj3"},{"name":"busybox","_id":"cid4ez047001fo3d3c2z0rcfl"},{"name":"移植","_id":"cid4ez04c001go3d39izqqrbp"},{"name":"DNS，第三方DNS","_id":"cid4ez04l001mo3d3ia5khh0x"}]}}